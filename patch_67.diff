From db72d3b4c8d1018bd321adaf46439e20f1a61c3f Mon Sep 17 00:00:00 2001
From: hurtonypeter <hurtonypeter@gmail.com>
Date: Wed, 20 Aug 2014 16:45:19 +0200
Subject: [PATCH] all in one

---
 README.md                                          |  44 ++
 .../entity.form_display.node.faq.default.yml       |  43 ++
 .../entity.view_display.node.faq.default.yml       |  43 ++
 config/install/faq.settings.yml                    |  28 +
 ...d.instance.node.faq.field_detailed_question.yml |  19 +
 .../field.storage.node.field_detailed_question.yml |  16 +
 config/install/node.type.faq.yml                   |  18 +
 css/faq.css                                        |  62 +++
 faq.info.yml                                       |   9 +
 faq.install                                        |  57 +++
 faq.libraries.yml                                  |   7 +
 faq.links.menu.yml                                 |   5 +
 faq.links.task.yml                                 |  31 ++
 faq.module                                         | 236 +++++++++
 faq.routing.yml                                    |  63 +++
 includes/faq.hide_answer.inc                       | 148 ++++++
 includes/faq.new_page.inc                          | 149 ++++++
 includes/faq.questions_inline.inc                  | 170 ++++++
 includes/faq.questions_top.inc                     | 294 +++++++++++
 js/faq.js                                          | 273 ++++++++++
 src/Controller/FaqController.php                   | 567 +++++++++++++++++++++
 src/FaqHelper.php                                  | 248 +++++++++
 src/FaqViewer.php                                  | 136 +++++
 src/Form/CategoriesForm.php                        | 167 ++++++
 src/Form/GeneralForm.php                           |  75 +++
 src/Form/OrderForm.php                             | 188 +++++++
 src/Form/QuestionsForm.php                         | 184 +++++++
 src/Plugin/Block/FaqCategoriesBlock.php            |  66 +++
 templates/faq-category-hide-answer.html.twig       | 117 +++++
 templates/faq-category-new-page.html.twig          | 108 ++++
 templates/faq-category-questions-inline.html.twig  | 127 +++++
 .../faq-category-questions-top-answers.html.twig   | 109 ++++
 templates/faq-category-questions-top.html.twig     | 157 ++++++
 .../faq-draggable-question-order-table.html.twig   |  15 +
 templates/faq-hide-answer.html.twig                |  36 ++
 templates/faq-new-page.html.twig                   |  17 +
 templates/faq-page.html.twig                       |  35 ++
 templates/faq-questions-inline.html.twig           |  47 ++
 templates/faq-questions-top.html.twig              |  48 ++
 39 files changed, 4162 insertions(+)
 create mode 100644 README.md
 create mode 100644 config/install/entity.form_display.node.faq.default.yml
 create mode 100644 config/install/entity.view_display.node.faq.default.yml
 create mode 100644 config/install/faq.settings.yml
 create mode 100644 config/install/field.instance.node.faq.field_detailed_question.yml
 create mode 100644 config/install/field.storage.node.field_detailed_question.yml
 create mode 100644 config/install/node.type.faq.yml
 create mode 100644 css/faq.css
 create mode 100644 faq.info.yml
 create mode 100644 faq.install
 create mode 100644 faq.libraries.yml
 create mode 100644 faq.links.menu.yml
 create mode 100644 faq.links.task.yml
 create mode 100644 faq.module
 create mode 100644 faq.routing.yml
 create mode 100644 includes/faq.hide_answer.inc
 create mode 100644 includes/faq.new_page.inc
 create mode 100644 includes/faq.questions_inline.inc
 create mode 100644 includes/faq.questions_top.inc
 create mode 100644 js/faq.js
 create mode 100644 src/Controller/FaqController.php
 create mode 100644 src/FaqHelper.php
 create mode 100644 src/FaqViewer.php
 create mode 100644 src/Form/CategoriesForm.php
 create mode 100644 src/Form/GeneralForm.php
 create mode 100644 src/Form/OrderForm.php
 create mode 100644 src/Form/QuestionsForm.php
 create mode 100644 src/Plugin/Block/FaqCategoriesBlock.php
 create mode 100644 templates/faq-category-hide-answer.html.twig
 create mode 100644 templates/faq-category-new-page.html.twig
 create mode 100644 templates/faq-category-questions-inline.html.twig
 create mode 100644 templates/faq-category-questions-top-answers.html.twig
 create mode 100644 templates/faq-category-questions-top.html.twig
 create mode 100644 templates/faq-draggable-question-order-table.html.twig
 create mode 100644 templates/faq-hide-answer.html.twig
 create mode 100644 templates/faq-new-page.html.twig
 create mode 100644 templates/faq-page.html.twig
 create mode 100644 templates/faq-questions-inline.html.twig
 create mode 100644 templates/faq-questions-top.html.twig

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..4ca5735
--- /dev/null
+++ b/README.md
@@ -0,0 +1,44 @@
+Frequently Asked Questions
+==============================
+The Frequently Asked Questions (faq) module allows users, 
+with appropriate permissions, to create question and answer 
+pairs which they want displayed on the 'faq' page. The 'faq' 
+page is automatically generated from the FAQ nodes configured. 
+
+### Installation
+1. Copy faq folder to [drupalinstallationrootfolder]/modules directory.
+2. At admin/modules enable the FAQ module.
+3. Set permissions at admin/people/permissions#module-faq
+4. Configure the module at admin/config/content/faq
+5. Your FAQ-s are available at /faq-page and /faq-page/{taxonomy**termid} depends on the settings at the previous point.
+
+Note: this is a dev version, tested on the drupal 8.0.x-dev core.
+
+### Features
+The layout of the FAQ page can be modified on the settings page. There are four question and answer layouts to choose from. In addition, if the 'Taxonomy' module is enabled, it is possible to put the questions into different categories when editing. Users will need the 'view faq page' permission to view the built-in 'faq' page and will need the 'administer faq' permission to configure the layout, etc.
+There is a block included in this module: FAQ categories shows FAQ-related taxonomy terms in a block.
+
+### General settings tab
+In this page you can set the FAQ Page title, description and use custom breadcrumbs or not. These settings wil be shown on every FAQ Page, breadcrumbs are build by categories.
+
+### Questions settings tab
+Page layout determines how to render a FAQ page:
+* **Questions inline**: the answer is directly below the question
+* **Clicking on question takes user to answer futher down the page**: on the top of the page there is a ‘table of content’ and then the question-answers
+* **Clicking on question opens/hides answer under question**: the answer is hidden by default, collapse all/expand all links provided
+* **Clicking on question opens the answer in a new page**: answer is not listed on the page, just a link to the content
+
+In miscellaneous layout settings you can set the listing style, you can label the questions and answers.
+
+The Quesions length determines how the questions are shown on pages. From node edit form you can disable ‘detailed question’ by checking off the ‘Allow long question text to be configured’.
+Another oppurtunities: use accordion effect for ‘open/hide’ layout, use answer teasers insted of full nodes, you can show or hide node links and disable linking to the quesion node. You can also set the ‘back to top’ text and give a default sorting to the nodes.
+
+### Category settings tab
+In this page you can configure how to categorize the questions. The common in this layouts is that we can distinguish two page: the simple /faq-page and a category view on /faq-page/{termid} url. On the simple faq-page there is a hierarchical category list and on the category view the FAQs of the current category ans subcategories are listed. The available categories layouts:
+* **Don’t display**: in this case on the simple /faq-page site there are no categories listed, but the category views are still available in /faq-page/{termid} form.
+* **Categories inline**: on the top of the page there is a table of contents structured by the categories.
+* **Clicking on category opens/hides question and answers under category**
+* **Clicking on category opens the questions/answers in a new page**: in this case questions layout setting won’t affect the site’s layout.
+
+### Ordering FAQs
+On the /faq-page/order or /faq-page/{termid}/order there is the oppurtunity to add custom ordering to the questions. These settings are distinguished by categories, so if a question is a member of more categories, you can order categories separately.
diff --git a/config/install/entity.form_display.node.faq.default.yml b/config/install/entity.form_display.node.faq.default.yml
new file mode 100644
index 0000000..6a58547
--- /dev/null
+++ b/config/install/entity.form_display.node.faq.default.yml
@@ -0,0 +1,43 @@
+langcode: en
+status: true
+dependencies:
+  entity:
+    - field.instance.node.faq.body
+    - field.instance.node.faq.field_detailed_question
+    - node.type.faq
+  module:
+    - path
+    - text
+id: node.faq.default
+targetEntityType: node
+bundle: faq
+mode: default
+content:
+  title:
+    type: string
+    weight: 0
+    settings:
+      size: 60
+      placeholder: ''
+    third_party_settings: {  }
+  field_detailed_question:
+    type: text_textarea
+    weight: 1
+    settings:
+      rows: 5
+      placeholder: ''
+    third_party_settings: {  }
+  path:
+    type: path
+    weight: 2
+    settings: {  }
+    third_party_settings: {  }
+  body:
+    type: text_textarea_with_summary
+    weight: 3
+    settings:
+      rows: 9
+      summary_rows: 3
+      placeholder: ''
+    third_party_settings: {  }
+hidden: {  }
\ No newline at end of file
diff --git a/config/install/entity.view_display.node.faq.default.yml b/config/install/entity.view_display.node.faq.default.yml
new file mode 100644
index 0000000..74bc3bf
--- /dev/null
+++ b/config/install/entity.view_display.node.faq.default.yml
@@ -0,0 +1,43 @@
+langcode: en
+status: true
+dependencies:
+  entity:
+    - field.instance.node.faq.body
+    - field.instance.node.faq.field_detailed_question
+    - node.type.faq
+  module:
+    - path
+    - text
+id: node.faq.default
+targetEntityType: node
+bundle: faq
+mode: default
+content:
+  title:
+    type: string
+    weight: 0
+    settings:
+      size: 60
+      placeholder: ''
+    third_party_settings: {  }
+  field_detailed_question:
+    type: text_textarea
+    weight: 1
+    settings:
+      rows: 5
+      placeholder: ''
+    third_party_settings: {  }
+  path:
+    type: path
+    weight: 2
+    settings: {  }
+    third_party_settings: {  }
+  body:
+    type: text_textarea_with_summary
+    weight: 3
+    settings:
+      rows: 9
+      summary_rows: 3
+      placeholder: ''
+    third_party_settings: {  }
+hidden: {  }
diff --git a/config/install/faq.settings.yml b/config/install/faq.settings.yml
new file mode 100644
index 0000000..9389631
--- /dev/null
+++ b/config/install/faq.settings.yml
@@ -0,0 +1,28 @@
+title: 'Frequently Asked Questions'
+description: ''
+custom_breadcrumbs: TRUE
+
+display: 'questions_top'
+question_listing: 'ul'
+qa_mark: FALSE
+question_label: 'Q:'
+answer_label: 'A:'
+question_length: 'short'
+question_long_form: TRUE
+hide_qa_accordion: FALSE
+show_expand_all: FALSE
+use_teaser: FALSE
+back_to_top: 'Back to Top'
+disable_node_links: FALSE
+default_sorting: 'DESC'
+
+use_categories: FALSE
+category_display: 'categories_inline'
+category_listing: 'ul'
+category_hide_qa_accordion: FALSE
+count: FALSE
+answer_category_name: FALSE
+group_questions_top: FALSE
+hide_child_terms: FALSE
+show_term_page_children: FALSE
+omit_vocabulary: []
\ No newline at end of file
diff --git a/config/install/field.instance.node.faq.field_detailed_question.yml b/config/install/field.instance.node.faq.field_detailed_question.yml
new file mode 100644
index 0000000..3b067ae
--- /dev/null
+++ b/config/install/field.instance.node.faq.field_detailed_question.yml
@@ -0,0 +1,19 @@
+langcode: en
+status: true
+dependencies:
+  entity:
+    - field.storage.node.field_detailed_question
+    - node.type.faq
+id: node.faq.field_detailed_question
+label: 'Detailed Question'
+field_name: field_detailed_question
+entity_type: node
+bundle: faq
+description: ''
+required: false
+translatable: true
+default_value: {  }
+default_value_function: ''
+settings:
+  text_processing: '0'
+field_type: text_long
diff --git a/config/install/field.storage.node.field_detailed_question.yml b/config/install/field.storage.node.field_detailed_question.yml
new file mode 100644
index 0000000..cc74c61
--- /dev/null
+++ b/config/install/field.storage.node.field_detailed_question.yml
@@ -0,0 +1,16 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - node
+    - text
+id: node.field_detailed_question
+name: field_detailed_question
+entity_type: node
+type: text_long
+settings: {  }
+module: text
+locked: true
+cardinality: 1
+translatable: true
+indexes: {  }
diff --git a/config/install/node.type.faq.yml b/config/install/node.type.faq.yml
new file mode 100644
index 0000000..57054bb
--- /dev/null
+++ b/config/install/node.type.faq.yml
@@ -0,0 +1,18 @@
+type: faq
+name: FAQ
+description: 'A frequently asked question and its answer.'
+help: ''
+has_title: true
+title_label: Question
+settings:
+  node:
+    options:
+      status: true
+      promote: false
+      sticky: false
+      revision: false
+    preview: 1
+    submitted: true
+status: true
+langcode: en
+dependencies: {  }
diff --git a/css/faq.css b/css/faq.css
new file mode 100644
index 0000000..960f4fc
--- /dev/null
+++ b/css/faq.css
@@ -0,0 +1,62 @@
+.faq-category-indent {
+  padding-left: 20px;
+}
+
+.faq-more-link {
+  font-size: 0.85em;
+  margin-left: 30em;
+  margin-top: 0;
+  margin-bottom: -1.25em;
+  text-align: right;
+}
+
+.faq-top-link {
+  font-size: 0.8em;
+  margin-top:0;
+  margin-bottom: 0;
+  padding-bottom: 1.0em;
+}
+
+.faq-question {
+  padding-top: 5px;
+  padding-left: 20px;
+}
+
+.faq-answer {
+  padding-left: 40px;
+}
+
+.faq-answer .faq-answer-label {
+  float: left;
+  margin-right: 0.5em;
+}
+
+.faq-dl-hide-answer {
+  padding-bottom: 15px;
+}
+
+img.faq-tax-image {
+  float: left;
+  padding: 0px 3px 0px 3px;
+}
+
+div.faq-detailed-question {
+  font-style: italic;
+}
+
+.faq .collapsible {
+	display: block;
+}
+
+.faq .collapsed {
+	display: none;
+}
+
+.faq #faq-expand-all {
+  text-align: right;
+  display: none;
+}
+.faq #faq-expand-all a.faq-expand-all-link,
+.faq #faq-expand-all a.faq-collapse-all-link {
+  display: none;
+}
diff --git a/faq.info.yml b/faq.info.yml
new file mode 100644
index 0000000..525066a
--- /dev/null
+++ b/faq.info.yml
@@ -0,0 +1,9 @@
+name: 'Frequently Asked Questions'
+type: module
+description: 'Manages configuration of questions for a FAQ page.'
+core: 8.x
+version: VERSION
+package: FAQ
+dependencies:
+  - node
+configure: faq.faq-admin
\ No newline at end of file
diff --git a/faq.install b/faq.install
new file mode 100644
index 0000000..03a4895
--- /dev/null
+++ b/faq.install
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @file
+ * FAQ module install file.
+ */
+
+function faq_schema() {
+    $schema = array();
+    
+    $schema['faq_weights'] = array(
+        'description' => 'A table containing the weight of each faq node by category.',
+        'fields' => array(
+            'tid' => array(
+                'type' => 'int',
+                'unsigned' => TRUE,
+                'not null' => TRUE,
+                'default' => 0,
+                'description' => 'The primary identifier for a term or category.  This will be 0 for non-categorized nodes.',
+            ),
+            'nid' => array(
+                'type' => 'int',
+                'unsigned' => TRUE,
+                'not null' => TRUE,
+                'default' => 0,
+                'description' => 'The primary identifier for a node.',
+            ),
+            'weight' => array(
+                'type' => 'int',
+                'size' => 'tiny',
+                'not null' => TRUE,
+                'default' => 0,
+                'description' => 'A number representing the weight of a node.  Nodes with lower weight values will appear above those with higher weight values.',
+            ),
+        ),
+        'primary key' => array('nid', 'tid'),
+    );
+    return $schema;
+}
+
+/**
+ * Implements hook_install()
+ */
+function faq_install(){
+    $locked = Drupal::state()->get('node.type.locked');
+    $locked['faq'] = 'faq';
+    Drupal::state()->set('node.type.locked', $locked);
+}
+
+function faq_uninstall(){
+    $locked = Drupal::state()->get('node.type.locked');
+    unset($locked['faq']);
+    Drupal::state()->set('node.type.locked', $locked);
+}
+
+
+?>
\ No newline at end of file
diff --git a/faq.libraries.yml b/faq.libraries.yml
new file mode 100644
index 0000000..7757123
--- /dev/null
+++ b/faq.libraries.yml
@@ -0,0 +1,7 @@
+faq-scripts:
+    version: VERSION
+    js:
+        js/faq.js: {}
+    dependencies:
+        - core/jquery
+        - core/drupal
\ No newline at end of file
diff --git a/faq.links.menu.yml b/faq.links.menu.yml
new file mode 100644
index 0000000..31f0494
--- /dev/null
+++ b/faq.links.menu.yml
@@ -0,0 +1,5 @@
+faq.admin:
+    title: 'Frequently Asked Questions'
+    description: 'Allows the user to configure the layout of questions and answers on a FAQ page.'
+    parent: system.admin_config_content
+    route_name: faq.faq-admin
\ No newline at end of file
diff --git a/faq.links.task.yml b/faq.links.task.yml
new file mode 100644
index 0000000..c778074
--- /dev/null
+++ b/faq.links.task.yml
@@ -0,0 +1,31 @@
+faq.admin.categories:
+    title: 'Categories'
+    route_name: faq.faq-admin.categories
+    base_route: system.admin_config_content
+    weight: 10
+faq.admin.questions:
+    title: 'Questions'
+    route_name: faq.faq-admin.questions
+    base_route: system.admin_config_content
+    weight: 5
+faq.admin:
+    title: 'General'
+    route_name: faq.faq-admin
+    base_route: system.admin_config_content
+    weight: 0
+faq.faq-page:
+    title: 'List'
+    route_name: faq.faq-page
+    base_route: faq.faq-page
+faq.faq-order:
+    title: 'Order'
+    route_name: faq.faq-page.order
+    base_route: faq.faq-page
+faq.category-faq-page:
+    title: 'List'
+    route_name: faq.faq-page-category
+    base_route: faq.faq-page-category
+faq.category-faq-order:
+    title: 'Order'
+    route_name: faq.faq-page.order-category
+    base_route: faq.faq-page-category
\ No newline at end of file
diff --git a/faq.module b/faq.module
new file mode 100644
index 0000000..1bf189b
--- /dev/null
+++ b/faq.module
@@ -0,0 +1,236 @@
+<?php
+
+/**
+ * @file
+ * The FAQ module allows users to create a FAQ page, with questions and answers
+ * displayed in different styles, according to the settings.
+ */
+
+use Drupal\Core\Render\Element;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\faq\FaqHelper;
+
+/**
+ * Implements hook_help().
+ */
+function faq_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+  $output = '';
+  switch ($route_name) {
+    case 'help.page.faq':
+      $output .= '<p>' . t("This module allows users with the 'administer faq' permission to create question and answer pairs which will be displayed on the faq page.  The faq page is automatically generated from the FAQ nodes configured and the layout of this page can be modified on the settings page.  Users will need the 'view faq page' permission in order to view the faq page.") . '</p>' .
+        '<p>' . t("To create a question and answer, the user must create a 'FAQ' node (Create content >> FAQ).  This screen allows the user to edit the question and answer text.  If the 'Taxonomy' module is enabled and there are some terms configured for the FAQ node type, it will also be possible to put the questions into different categories when editing.") . '</p>' .
+        '<p>' . t("The 'Frequently Asked Questions' settings configuration screen will allow users with 'administer faq' permissions to specify different layouts of the questions and answers.") . '</p>' .
+        '<p>' . t("All users with 'view faq page' permissions will be able to view the generated FAQ page.") . '</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_permission().
+ */
+function faq_permission(){
+    /**
+     * Permissions of the faq module
+     */
+    $permissions = array();
+    
+    $permissions['administer faq'] = array(
+        'title' => t('Administer FAQ module'),
+        'description' => t('Allows user to administer FAQ module settings')
+    );
+    
+    $permissions['administer faq order'] = array(
+        'title' => t('Administer FAQ order'),
+        'description' => t('Allows user to order FAQ entities.')
+    );
+    
+    $permissions['view faq page'] = array(
+        'title' => t('View FAQ pages'),
+        'description' => t('Allows user to view FAQ pages.')
+    );
+    
+    return $permissions;
+}
+
+/**
+ * Implements hook_node_access().
+ */
+function faq_node_access(\Drupal\node\NodeInterface $node, $op, $account, $langcode) {
+  // Ignore non-FAQ node.
+  if ($node->getType() !== 'faq') {
+    return NODE_ACCESS_IGNORE;
+  }
+  
+  if ($op == 'view') {
+    return NODE_ACCESS_IGNORE;
+  }
+  elseif ($op == 'create' || $op == 'update' || $op == 'delete') {
+    if(\Drupal::currentUser()->hasPermission('administer faq')) {
+      return NODE_ACCESS_ALLOW;
+    }
+  }
+  
+  return NODE_ACCESS_IGNORE;
+}
+
+/**
+ * Implements hook_theme().
+ */
+function faq_theme() {
+    $path = drupal_get_path('module', 'faq') . '/includes';
+    return array(
+    'faq_draggable_question_order_table' => array(
+      'template' => 'faq-draggable-question-order-table',
+      'render element' => 'form',
+    ),
+    'faq_questions_top' => array(
+      'file' => '/includes/faq.questions_top.inc',
+      'template' => 'faq-questions-top',
+      'variables' => array('data' => NULL),
+    ),
+    'faq_category_questions_top' => array(
+      'file' => '/includes/faq.questions_top.inc',
+      'template' => 'faq-category-questions-top',
+      'variables' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
+    ),
+    'faq_category_questions_top_answers' => array(
+      'file' => '/includes/faq.questions_top.inc',
+      'template' => 'faq-category-questions-top-answers',
+      'variables' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
+    ),
+    'faq_hide_answer' => array(
+      'file' => '/includes/faq.hide_answer.inc',
+      'template' => 'faq-hide-answer',
+      'variables' => array('data' => NULL),
+    ),
+    'faq_category_hide_answer' => array(
+      'file' => '/includes/faq.hide_answer.inc',
+      'template' => 'faq-category-hide-answer',
+      'variables' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
+    ),
+    'faq_questions_inline' => array(
+      'file' => '/includes/faq.questions_inline.inc',
+      'template' => 'faq-questions-inline',
+      'variables' => array('data' => NULL),
+    ),
+    'faq_category_questions_inline' => array(
+      'file' => '/includes/faq.questions_inline.inc',
+      'template' => 'faq-category-questions-inline',
+      'variables' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
+    ),
+    'faq_new_page' => array(
+      'file' => '/includes/faq.new_page.inc',
+      'template' => 'faq-new-page',
+      'variables' => array('data' => NULL),
+    ),
+    'faq_category_new_page' => array(
+      'file' => '/includes/faq.new_page.inc',
+      'template' => 'faq-category-new-page',
+      'variables' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
+    ),
+    'faq_page' => array(
+      'variables' => array('content' => '', 'answers' => '', 'description' => NULL),
+      'template' => 'faq-page',
+    ),
+  );
+}
+
+/**
+ * Theme function for question ordering drag and drop table.
+ */
+function template_preprocess_faq_draggable_question_order_table(&$variables){
+  $form = $variables['form'];
+  $options = array(
+    'table_id' => 'question-sort',
+    'action' => 'order',
+    'relationship' => 'sibling',
+    'group' => 'sort',
+  );
+  $header = array('', t('Question'), '', t('Sort'));
+  $rows = array();
+  foreach (Element::children($form) as $key) {
+    // Add class to group weight fields for drag and drop.
+    $form[$key]['sort']['#attributes']['class'] = array('sort');
+    $form[$key]['nid']['#attributes']['class'] = array('hidden-nid');
+    $row = array('');
+    $row[] = drupal_render($form[$key]['title']);
+    $row[] = drupal_render($form[$key]['nid']);
+    $row[] = drupal_render($form[$key]['sort']);
+    
+    $rows[] = array(
+      'data' => $row,
+      'class' => array('draggable'),
+    );
+  }
+  
+  $table = array(
+    '#type' => 'table',
+    '#header' => $header,
+    '#rows' => $rows,
+    '#attributes' => array(
+      'id' => 'question-sort',
+    ),
+  );
+  drupal_attach_tabledrag($table, $options);
+  
+  $variables['order_table'] = $table;
+}
+
+/**
+ * Theme function for faq page wrapper divs.
+ */
+function template_preprocess_faq_page(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  if($faq_settings->get('show_expand_all')) {
+    $variables['faq_expand'] = true;
+  } else {
+    $variables['faq_expand'] = false;
+  }
+}
+
+/**
+ * Function set the rebuild of the form in the FAQ Settings - Weight tab.
+ *
+ * @param $form
+ *   Array, containing the form structure.
+ * @param &$form_state
+ *   The 'rebuild' key inside $form_state['rebuild'] structure, overrides the
+ *   'redirect' key: when it is set to TRUE, the form will be rebuilt from
+ *   scratch and displayed on screen.
+ */
+function faq_order_settings_choose_cat_form_submit($form, &$form_state) {
+  $form_state['rebuild'] = TRUE;
+}
+
+/**
+ * Implements template_preprocess_page().
+ * 
+ * Overrider breadcrumbs for faq pages.
+ */
+function faq_preprocess_page(&$variables){
+  $faq_settings = \Drupal::config('faq.settings');
+  $use_categories = $faq_settings->get('use_categories');
+  
+  $route_match = \Drupal::service('current_route_match');
+  $tid = $route_match->getRawParameter('tid');
+  
+  if (FaqHelper::arg(0) == 'faq-page' && $use_categories && is_numeric($tid) && $current_term = Term::load($tid)) {
+    $breadcrumb = FaqHelper::setFaqBreadcrumb($current_term);
+    if (!empty($breadcrumb)) {
+      $variables['breadcrumb']['#breadcrumb'] = $breadcrumb;
+    }
+  }
+
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ * 
+ * If question_long_form is disabled, hide the 'detailed queston' from node editing.
+ */
+function faq_form_faq_node_edit_form_alter(&$form, &$form_state, $form_id) {
+  $faq_settings = \Drupal::config('faq.settings');
+  if (!$faq_settings->get('question_long_form')) {
+    $form['field_detailed_question']['#access'] = FALSE;
+  }
+}
diff --git a/faq.routing.yml b/faq.routing.yml
new file mode 100644
index 0000000..47fbcf1
--- /dev/null
+++ b/faq.routing.yml
@@ -0,0 +1,63 @@
+faq.faq-page:
+    path: '/faq-page'
+    defaults:
+        _title: 'Frequently Asked Questions'
+        _content: 'Drupal\faq\Controller\FaqController::faqPage'
+    requirements:
+        _permission: 'view faq page'
+
+faq.faq-page-category:
+    path: '/faq-page/{tid}'
+    defaults:
+        _title: 'Frequently Asked Questions'
+        _content: 'Drupal\faq\Controller\FaqController::faqPage'
+    requirements:
+        _permission: 'view faq page'
+
+faq.faq-page.order:
+    path: '/faq-page/order'
+    defaults:
+        _title: 'Order'
+        _content: 'Drupal\faq\Controller\FaqController::orderPage'
+    requirements:
+        _permission: 'administer faq order'
+
+faq.faq-page.order-category:
+    path: '/faq-page/{tid}/order'
+    defaults:
+        _title: 'Order'
+        _content: 'Drupal\faq\Controller\FaqController::orderPage'
+    requirements:
+        _permission: 'administer faq order'
+
+faq.faq-admin:
+    path: '/admin/config/content/faq'
+    defaults:
+        _title: 'General'
+        _content: 'Drupal\faq\Controller\FaqController::generalSettings'
+    requirements:
+        _permission: 'administer faq'
+
+faq.faq-admin.general:
+    path: '/admin/config/content/faq/general'
+    defaults:
+        _title: 'General'
+        _content: 'Drupal\faq\Controller\FaqController::generalSettings'
+    requirements:
+        _permission: 'administer faq'
+
+faq.faq-admin.questions:
+    path: '/admin/config/content/faq/questions'
+    defaults:
+        _title: 'Questions'
+        _content: 'Drupal\faq\Controller\FaqController::questionsSettings'
+    requirements:
+        _permission: 'administer faq'
+
+faq.faq-admin.categories:
+    path: '/admin/config/content/faq/categories'
+    defaults:
+        _title: 'Categories'
+        _content: 'Drupal\faq\Controller\FaqController::categoriesSettings'
+    requirements:
+        _permission: 'administer faq'
\ No newline at end of file
diff --git a/includes/faq.hide_answer.inc b/includes/faq.hide_answer.inc
new file mode 100644
index 0000000..2edfe52
--- /dev/null
+++ b/includes/faq.hide_answer.inc
@@ -0,0 +1,148 @@
+<?php
+
+/**
+ * @file
+ * FAQ page callbacks for the "hide answer" layouts.
+ */
+
+use Drupal\faq\FaqHelper;
+use Drupal\faq\FaqViewer;
+use Drupal\Component\Utility\SafeMarkup;
+
+/**
+ * Create FAQ page if set to show/hide answer when question is clicked.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_hide_answer(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+  $this_page = current_path();
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+
+  $nodes = array();
+  foreach ($data as $index=>$node) {
+    $anchor = 'n' . $node->id();
+    FaqViewer::viewQuestion($nodes[$index], $node, $this_page, $anchor);
+    FaqViewer::viewAnswer($nodes[$index], $node, $teaser);
+  }
+  $variables['use_teaser'] = $teaser;
+  $variables['nodes'] = $nodes;
+}
+
+/**
+ * Create categorized FAQ page if set to show answer when question is clicked.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_category_hide_answer(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+  $category_display = $variables['category_display'];
+  $term = $variables['term'];
+  $term_id = $term->id();
+  $parent_term = $variables['parent_term'];
+  $class = $variables['class'];
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+  $variables['use_teaser'] = $teaser;
+  $display_faq_count = $faq_settings->get('count');
+  $hide_child_terms = $faq_settings->get('hide_child_terms');
+  $show_term_page_children = $faq_settings->get('show_term_page_children');
+  $default_sorting = $faq_settings->get('default_sorting');
+
+  // Initialise some variables.
+  $default_weight = 0;
+  if ($default_sorting != 'DESC') {
+    $default_weight = 1000000;
+  }
+  $this_page = current_path();
+  $get_child_terms = 0;
+  // Check if we're on a faq page.
+  if (FaqHelper::arg(0) == 'faq-page') {
+    // Check if we're on a categorized faq page.
+    if (is_numeric(FaqHelper::arg(1))) {
+      $get_child_terms = FaqHelper::arg(1);
+    }
+  }
+  // Force some settings in case we're processing a special faq question list
+  // created by a custom call to faq_page().
+  elseif (!empty($parent_term)) {
+    $get_child_terms = $parent_term->id();
+    $show_term_page_children = TRUE;
+  }
+
+
+  // Get number of questions, and account for hidden sub-categories.
+  $count = 0;
+  if ($display_faq_count && $hide_child_terms) {
+    $count = FaqHelper::taxonomyTermCountNodes($term_id);
+  }
+  $variables['display_faq_count'] = $display_faq_count;
+
+  // Get taxonomy image.
+  $variables['term_image'] = '';
+  // taxonomy_image module is not exists in D8 yet
+  //if (module_exists('taxonomy_image')) {
+  //  $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
+  //}
+  // Configure header.
+  $variables['category_depth'] = $term->depth;
+  $variables['category_name'] = $term->getName();
+  if ($category_display == 'hide_qa') {
+    $variables['header_title'] = l($term->getName(), "faq/$term_id");
+  }
+  else {
+    $variables['header_title'] = $term->getName();
+  }
+
+  // Configure category description.
+  $variables['description'] = SafeMarkup::set($term->getDescription());
+
+  // Get list of sub-categories if necessary.
+  $child_categories = array();
+  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
+    $child_categories = FaqHelper::viewChildCategoryHeaders($term);
+  }
+  $variables['subcat_list'] = $child_categories;
+  $variables['subcat_list_style'] = $faq_settings->get('category_listing');
+
+  // Configure class (faq-qa or faq-qa-hide).
+  if ($get_child_terms == $term_id) {
+    $variables['container_class'] = 'faq-qa';
+  }
+  else {
+    $variables['container_class'] = $class;
+  }
+
+  // Configure sub-category bodies (theme recursively).
+  $variables['subcat_body_list'] = array();
+  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq-page') || $hide_child_terms) && $category_display == 'hide_qa')) {
+    $variables['subcat_body_list'] = FaqHelper::getChildCategoriesFaqs($term, 'faq_category_hide_answer', $default_weight, $default_sorting, $category_display, $variables['class'], $parent_term);
+  }
+
+  if (!count($data)) {
+    $variables['question_count'] = $count;
+    $variables['nodes'] = array();
+    return;
+  }
+
+  $nodes = array();
+  foreach ($data as $node) {
+    if (!$hide_child_terms) {
+      $count++;
+    }
+    $node_var = array();
+    $anchor = 't' . $term_id . 'n' . $node->id();
+    FaqViewer::viewQuestion($node_var, $node, $this_page, $anchor);
+    FaqViewer::viewAnswer($node_var, $node, $teaser);
+    $nodes[] = $node_var;
+  }
+  $variables['nodes'] = $nodes;
+  $variables['question_count'] = $count;
+}
diff --git a/includes/faq.new_page.inc b/includes/faq.new_page.inc
new file mode 100644
index 0000000..6c68bda
--- /dev/null
+++ b/includes/faq.new_page.inc
@@ -0,0 +1,149 @@
+<?php
+
+/**
+ * @file
+ * FAQ page callbacks for the "new page" layouts.
+ */
+
+use Drupal\faq\FaqHelper;
+use Drupal\faq\FaqViewer;
+use Drupal\Component\Utility\SafeMarkup;
+
+/**
+ * Create FAQ page if set to show the answer in a new page.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_new_page(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $items = array();
+  $data = $variables['data'];
+
+  foreach ($data as $node) {
+    $node_id = $node->id();
+    $items[] = l($node->getTitle(), "node/$node_id");
+  }
+
+  $list_style = $faq_settings->get('question_listing');
+  $variables['list_style'] = $list_style;
+  $variables['list_items'] = $items;
+
+  $item_list = array(
+    '#theme' => 'item_list',
+    '#title' => NULL,
+    '#list_type' => $list_style,
+    '#items' => $items,
+  );
+
+  $variables['list'] = SafeMarkup::set(drupal_render($item_list));
+}
+
+/**
+ * Create categorized FAQ page if set to show answer in a new page.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_category_new_page(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+  $category_display = $variables['category_display'];
+  $term = $variables['term'];
+  $term_id = $term->id();
+  $parent_term = $variables['parent_term'];
+  $class = $variables['class'];
+  $this_page = current_path();
+
+  // Fetch configuration.
+  $display_faq_count = $faq_settings->get('count');
+  $hide_child_terms = $faq_settings->get('hide_child_terms');
+  $show_term_page_children = $faq_settings->get('show_term_page_children');
+
+  // Initialise some variables.
+  $get_child_terms = 0;
+  // Check if we're on a faq page.
+  if (FaqHelper::arg(0) == 'faq-page') {
+    // Check if we're on a categorized faq page.
+    if (is_numeric(FaqHelper::arg(1))) {
+      $get_child_terms = FaqHelper::arg(1);
+    }
+  }
+  // Force some settings in case we're processing a special faq question list
+  // created by a custom call to faq_page().
+  elseif (!empty($parent_term)) {
+    $get_child_terms = $parent_term->id();
+    $show_term_page_children = TRUE;
+  }
+
+  $default_sorting = $faq_settings->get('default_sorting');
+  $default_weight = 0;
+  if ($default_sorting != 'DESC') {
+    $default_weight = 1000000;
+  }
+
+  // Get number of questions, and account for hidden sub-categories.
+  $count = 0;
+  if ($display_faq_count && $hide_child_terms) {
+    $count = FaqHelper::taxonomyTermCountNodes($term_id);
+  }
+  $variables['display_faq_count'] = $display_faq_count;
+
+  // Get taxonomy image.
+  $variables['term_image'] = '';
+  //taxonomy_image does not exists in D8 yet
+  //if (module_exists('taxonomy_image')) {
+  //  $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
+  //}
+  // Configure header.
+  $variables['category_depth'] = $term->depth;
+  if ($category_display == 'hide_qa') {
+    $variables['header_title'] = l($term->getName(), "faq/$term_id");
+  }
+  else {
+    $variables['header_title'] = $term->getName();
+  }
+
+  // Configure category description.
+  $variables['description'] = SafeMarkup::set($term->getDescription());
+
+  // Get list of sub-categories if necessary.
+  $child_categories = array();
+  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
+    $child_categories = FaqHelper::viewChildCategoryHeaders($term);
+  }
+  $variables['subcat_list'] = $child_categories;
+  $variables['subcat_list_style'] = $faq_settings->get('category_listing');
+
+  // Configure class (faq-qa or faq-qa-hide).
+  if ($get_child_terms == $term_id) {
+    $variables['container_class'] = 'faq-qa';
+  }
+  else {
+    $variables['container_class'] = $class;
+  }
+
+  // Configure sub-category bodies (theme recursively).
+  $variables['subcat_body_list'] = array();
+  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq-page') || $hide_child_terms) && $category_display == 'hide_qa')) {
+    $variables['subcat_body_list'] = FaqHelper::getChildCategoriesFaqs($term, 'faq_category_new_page', $default_weight, $default_sorting, $category_display, $variables['class'], $parent_term);
+  }
+
+  if (!count($data)) {
+    $variables['question_count'] = $count;
+    $variables['nodes'] = array();
+    return;
+  }
+
+  $nodes = array();
+  foreach ($data as $node) {
+    if (!$hide_child_terms) {
+      $count++;
+    }
+    $node_id = $node->id();
+    $nodes[] = l($node->getTitle(), "node/$node_id");
+  }
+  $variables['question_list'] = $nodes;
+  $variables['question_list_style'] = $faq_settings->get('question_listing');
+  $variables['question_count'] = $count;
+}
diff --git a/includes/faq.questions_inline.inc b/includes/faq.questions_inline.inc
new file mode 100644
index 0000000..e404193
--- /dev/null
+++ b/includes/faq.questions_inline.inc
@@ -0,0 +1,170 @@
+<?php
+
+/**
+ * @file
+ * FAQ page callbacks for the "questions inline" layouts.
+ */
+
+use Drupal\faq\FaqHelper;
+use Drupal\faq\FaqViewer;
+use Drupal\Component\Utility\SafeMarkup;
+
+/**
+ * Create the FAQ page if set to show the questions inline.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_questions_inline(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+
+  // Fetch configuration.
+  $disable_node_links = $faq_settings->get('disable_node_links');
+  $teaser = $faq_settings->get('use_teaser');
+  $links = $faq_settings->get('show_node_links');
+
+  // Configure "back to top" link.
+  $this_page = current_path();
+  $back_to_top = FaqViewer::initBackToTop($this_page);
+
+  // Configure labels.
+  $variables['question_label'] = '';
+  $variables['answer_label'] = '';
+  if ($faq_settings->get('qa_mark')) {
+    $variables['question_label'] = $faq_settings->get('question_label');
+    $variables['answer_label'] = $faq_settings->get('answer_label');
+  }
+
+  $nodes = array();
+  $count = 0;
+  foreach ($data as $node) {
+    $anchor = 'n' . $node->id();
+    FaqViewer::viewQuestion($nodes[$count], $node, NULL, $anchor);
+    FaqViewer::viewAnswer($nodes[$count], $node, $teaser);
+    $count++;
+  }
+  $variables['use_teaser'] = $teaser;
+  $variables['nodes'] = $nodes;
+}
+
+/**
+ * Create categorized FAQ page if set to show/hide the questions inline.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_category_questions_inline(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+  $category_display = $variables['category_display'];
+  $term = $variables['term'];
+  $term_id = $term->id();
+  $parent_term = $variables['parent_term'];
+  $class = $variables['class'];
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+  $display_faq_count = $faq_settings->get('count');
+  $hide_child_terms = $faq_settings->get('hide_child_terms');
+  $show_term_page_children = $faq_settings->get('show_term_page_children');
+  $default_sorting = $faq_settings->get('default_sorting');
+
+  // Initialise some variables.
+  $variables['use_teaser'] = $teaser;
+  $default_weight = 0;
+  if ($default_sorting != 'DESC') {
+    $default_weight = 1000000;
+  }
+  $this_page = current_path();
+  $get_child_terms = 0;
+  // Check if we're on a faq page.
+  if (FaqHelper::arg(0) == 'faq-page') {
+    // Check if we're on a categorized faq page.
+    if (is_numeric(FaqHelper::arg(1))) {
+      $get_child_terms = FaqHelper::arg(1);
+    }
+  }
+  // Force some settings in case we're processing a special faq question list
+  // created by a custom call to faq_page().
+  elseif (!empty($parent_term)) {
+    $get_child_terms = $parent_term->id();
+    $show_term_page_children = TRUE;
+  }
+
+  // Configure labels.
+  $variables['question_label'] = '';
+  $variables['answer_label'] = '';
+  if ($faq_settings->get('qa_mark', FALSE)) {
+    $variables['question_label'] = $faq_settings->get('question_label');
+    $variables['answer_label'] = $faq_settings->get('answer_label');
+  }
+
+  // Get number of questions, and account for hidden sub-categories.
+  $count = 0;
+  if ($display_faq_count && $hide_child_terms) {
+    $count = FaqHelper::taxonomyTermCountNodes($term_id);
+  }
+  $variables['display_faq_count'] = $display_faq_count;
+
+  // Get taxonomy image.
+  $variables['term_image'] = '';
+  // tadonomy_image does not exists in d8 yet
+  //if (module_exists('taxonomy_image')) {
+  //  $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
+  //}
+  // Configure header.
+  $variables['category_depth'] = $term->depth;
+  if ($category_display == 'hide_qa') {
+
+    $variables['header_title'] = l($term->getName(), "faq/$term_id");
+  }
+  else {
+    $variables['header_title'] = $term->getName();
+  }
+
+  // Configure category description.
+  $variables['description'] = SafeMarkup::set($term->getDescription());
+
+  // Get list of sub-categories if necessary.
+  $child_categories = array();
+  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
+    $child_categories = FaqHelper::viewChildCategoryHeaders($term);
+  }
+  $variables['subcat_list'] = $child_categories;
+  $variables['subcat_list_style'] = $faq_settings->get('category_listing');
+
+  // Configure class (faq-qa or faq-qa-hide).
+  if ($get_child_terms == $term_id) {
+    $variables['container_class'] = 'faq-qa';
+  }
+  else {
+    $variables['container_class'] = $class;
+  }
+
+  // Configure sub-category bodies (theme recursively).
+  $variables['subcat_body_list'] = array();
+  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq-page') || $hide_child_terms) && $category_display == 'hide_qa')) {
+    $variables['subcat_body_list'] = FaqHelper::getChildCategoriesFaqs($term, 'faq_category_questions_inline', $default_weight, $default_sorting, $category_display, $variables['class'], $parent_term);
+  }
+
+  if (!count($data)) {
+    $variables['question_count'] = $count;
+    $variables['nodes'] = array();
+    return;
+  }
+
+  $nodes = array();
+  foreach ($data as $node) {
+    if (!$hide_child_terms) {
+      $count++;
+    }
+    $node_var = array();
+    $anchor = 't' . $term_id . 'n' . $node->id();
+    FaqViewer::viewQuestion($node_var, $node, NULL, $anchor);
+    FaqViewer::viewAnswer($node_var, $node, $teaser);
+    $nodes[] = $node_var;
+  }
+  $variables['nodes'] = $nodes;
+  $variables['question_count'] = $count;
+}
diff --git a/includes/faq.questions_top.inc b/includes/faq.questions_top.inc
new file mode 100644
index 0000000..2d42d6c
--- /dev/null
+++ b/includes/faq.questions_top.inc
@@ -0,0 +1,294 @@
+<?php
+
+/**
+ * @file
+ * FAQ page callbacks for the "questions top" layouts.
+ */
+
+use Drupal\faq\FaqHelper;
+use Drupal\faq\FaqViewer;
+
+/**
+ * Create the structure of the page, when the questions are to be shown on top.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ * @return
+ *   A variable holding the HTML formatted page.
+ */
+function template_preprocess_faq_questions_top(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+
+  // Configure labels.
+  $variables['question_label'] = '';
+  $variables['answer_label'] = '';
+  if ($faq_settings->get('qa_mark')) {
+    $variables['question_label'] = $faq_settings->get('question_label');
+    $variables['answer_label'] = $faq_settings->get('answer_label');
+  }
+
+  $this_page = current_path();
+
+  // Loop through results.
+  $questions = array();
+  $answers = array();
+  $key = 0;
+  foreach ($data as $node) {
+    $anchor = 'n' . $node->id();
+    $questions[$key] = l($node->getTitle(), $this_page, array('fragment' => $anchor));
+    FaqViewer::viewQuestion($answers[$key], $node, NULL, $anchor);
+    FaqViewer::viewAnswer($answers[$key], $node, $teaser);
+    $key++;
+  }
+  $variables['limit'] = $key;
+
+  $list_style = $faq_settings->get('question_listing');
+  $variables['list_style'] = $list_style;
+  $variables['use_teaser'] = $teaser;
+  $variables['questions'] = $questions;
+  $variables['answers'] = $answers;
+  $item_list = array(
+    '#theme' => 'item_list',
+    '#items' => $questions,
+    '#title' => t('Content'),
+    '#list_type' => $list_style,
+  );
+  $variables['questions_list'] = drupal_render($item_list);
+}
+
+/**
+ * Create categorized questions for FAQ page if set to show questions on top.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_category_questions_top(&$variables) {
+
+  $faq_settings = \Drupal::config('faq.settings');
+
+  $data = $variables['data'];
+  $category_display = $variables['category_display'];
+  $term = $variables['term'];
+  $parent_term = $variables['parent_term'];
+  $class = $variables['class'];
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+  $display_faq_count = $faq_settings->get('count');
+  $hide_child_terms = $faq_settings->get('hide_child_terms');
+  $show_term_page_children = $faq_settings->get('show_term_page_children');
+  $group_questions_top = $faq_settings->get('group_questions_top');
+  $default_sorting = $faq_settings->get('default_sorting');
+
+  // Configure labels.
+  $variables['question_label'] = '';
+  $variables['answer_label'] = '';
+  if ($faq_settings->get('qa_mark')) {
+    $variables['question_label'] = $faq_settings->get('question_label');
+    $variables['answer_label'] = $faq_settings->get('answer_label');
+  }
+
+  // Initialise some variables.
+  $default_weight = 0;
+  if ($default_sorting != 'DESC') {
+    $default_weight = 1000000;
+  }
+  $this_page = current_path();
+  $get_child_terms = 0;
+  // Check if we're on a faq page.
+  if (FaqHelper::arg(0) == 'faq-page') {
+    // Check if we're on a categorized faq page.
+    if (is_numeric(FaqHelper::arg(1))) {
+      $get_child_terms = FaqHelper::arg(1);
+    }
+  }
+  // Force some settings in case we're processing a special faq question list
+  // created by a custom call to faq_page().
+  elseif (!empty($parent_term)) {
+    $get_child_terms = $parent_term->id();
+    $show_term_page_children = TRUE;
+  }
+
+  // Get number of questions, and account for hidden sub-categories.
+  $count = 0;
+  if ($display_faq_count && $hide_child_terms) {
+    $count = FaqHelper::taxonomyTermCountNodes($term->id());
+  }
+  $variables['display_faq_count'] = $display_faq_count;
+
+  // Get taxonomy image.
+  // taxonomy_image module doesn't exists yet in D8
+  $variables['term_image'] = '';
+  //if (module_exists('taxonomy_image')) {
+  //  $variables['term_image'] = '';
+  //  $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
+  //}
+
+  $term_id = $term->id();
+  // Configure header.
+  $variables['category_depth'] = $term->depth;
+  $variables['category_name'] = $term->getName();
+  if ($category_display == 'hide_qa') {
+    $variables['header_title'] = l($term->getName(), "faq/$term_id");
+  }
+  else {
+    $variables['header_title'] = $term->getName();
+  }
+
+  // Configure category description.
+  $variables['description'] = t($term->getDescription());
+
+  // Get list of sub-categories if necessary.
+  $child_categories = array();
+  if (($show_term_page_children || $hide_child_terms) && $category_display == 'new_page') {
+    $child_categories = FaqHelper::viewChildCategoryHeaders($term);
+  }
+  $variables['subcat_list'] = $child_categories;
+  $variables['subcat_list_style'] = $faq_settings->get('category_listing');
+
+  // Configure class (faq-qa or faq-qa-hide).
+  if ($get_child_terms == $term_id) {
+    $variables['container_class'] = 'faq-qa';
+  }
+  else {
+    $variables['container_class'] = $class;
+  }
+
+  // Configure sub-category bodies (theme recursively).
+  $variables['subcat_body_list'] = array();
+  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq-page') || $hide_child_terms) && $category_display == 'hide_qa')) {
+    $variables['subcat_body_list'] = FaqHelper::getChildCategoriesFaqs($term, 'faq_category_questions_top', $default_weight, $default_sorting, $category_display, $variables['class'], $parent_term);
+  }
+
+  $variables['group_questions_top'] = $group_questions_top;
+
+  if (!count($data)) {
+    $variables['question_count'] = $count;
+    $variables['nodes'] = array();
+    $variables['answer_category_name'] = FALSE;
+    return;
+  }
+
+  $questions = array();
+  $nodes = array();
+  foreach ($data as $node) {
+    if (!$hide_child_terms) {
+      $count++;
+    }
+    $node_var = array();
+    $anchor = 't' . $term->id() . 'n' . $node->id();
+    $questions[] = l($node->getTitle(), $this_page, array('fragment' => $anchor));
+    FaqViewer::viewQuestion($node_var, $node, NULL, $anchor);
+    if ($group_questions_top || $category_display == 'hide_qa') {
+      FaqViewer::viewAnswer($node_var, $node, $teaser);
+    }
+    $nodes[] = $node_var;
+  }
+  $variables['question_count'] = $count;
+  $variables['use_teaser'] = $teaser;
+  $variables['question_list'] = $questions;
+  $variables['question_list_style'] = $faq_settings->get('question_listing');
+
+  if ($group_questions_top || $category_display == "hide_qa") {
+    $variables['nodes'] = $nodes;
+    $variables['answer_category_name'] = $faq_settings->get('answer_category_name');
+  }
+  else {
+    $variables['nodes'] = array();
+    $variables['answer_category_name'] = FALSE;
+  }
+}
+
+/**
+ * Create categorized answers for FAQ page if set to show the questions on top.
+ *
+ * @param &$variables
+ *   Array reference of arguments given to the theme() function.
+ */
+function template_preprocess_faq_category_questions_top_answers(&$variables) {
+  $faq_settings = \Drupal::config('faq.settings');
+  $data = $variables['data'];
+  $category_display = $variables['category_display'];
+  $term = $variables['term'];
+  $parent_term = $variables['parent_term'];
+
+  // Fetch configuration.
+  $teaser = $faq_settings->get('use_teaser');
+  $hide_child_terms = $faq_settings->get('hide_child_terms');
+  $show_term_page_children = $faq_settings->get('show_term_page_children');
+  $group_questions_top = $faq_settings->get('group_questions_top');
+  $default_sorting = $faq_settings->get('default_sorting');
+
+  // Configure labels.
+  $variables['question_label'] = '';
+  $variables['answer_label'] = '';
+  if ($faq_settings->get('qa_mark')) {
+    $variables['question_label'] = $faq_settings->get('question_label');
+    $variables['answer_label'] = $faq_settings->get('answer_label');
+  }
+
+  // Initialise some variables.
+  $default_weight = 0;
+  if ($default_sorting != 'DESC') {
+    $default_weight = 1000000;
+  }
+
+  $variables['group_questions_top'] = $group_questions_top;
+  if ($group_questions_top || $category_display == "hide_qa") {
+    $variables['display_answers'] = FALSE;
+    $variables['category_depth'] = 0;
+    return;
+  }
+  $variables['display_answers'] = TRUE;
+
+  $this_page = current_path();
+  $get_child_terms = 0;
+  // Check if we're on a faq page.
+  if (FaqHelper::arg(0) == 'faq-page') {
+    // Check if we're on a categorized faq page.
+    if (is_numeric(FaqHelper::arg(1))) {
+      $get_child_terms = FaqHelper::arg(1);
+    }
+  }
+  // Force some settings in case we're processing a special faq question list
+  // created by a custom call to faq_page().
+  elseif (!empty($parent_term)) {
+    $get_child_terms = $parent_term->id();
+    $show_term_page_children = TRUE;
+  }
+
+  // taxonomy_image does not exists in D8 yet
+  // Get taxonomy image.
+  $variables['term_image'] = '';
+  //if (module_exists('taxonomy_image')) {
+  //  $variables['term_image'] = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
+  //}
+  // Configure sub-category bodies (theme recursively).
+  $variables['subcat_body_list'] = array();
+  if (($get_child_terms && $category_display == 'categories_inline') || ((($show_term_page_children && $this_page != 'faq-page') || $hide_child_terms) && $category_display == 'hide_qa')) {
+    $variables['subcat_body_list'] = FaqHelper::getChildCategoriesFaqs($term, 'faq_category_questions_top_answers', $default_weight, $default_sorting, $category_display, $variables['class'], $parent_term);
+  }
+
+
+  $nodes = array();
+  foreach ($data as $node) {
+    $node_var = array();
+    $anchor = 't' . $term->id() . 'n' . $node->id();
+    FaqViewer::viewQuestion($node_var, $node, NULL, $anchor);
+    FaqViewer::viewAnswer($node_var, $node, $teaser);
+    $nodes[] = $node_var;
+  }
+  $variables['use_teaser'] = $teaser;
+  $variables['nodes'] = $nodes;
+  $variables['category_name'] = t($term->getName());
+  $variables['category_depth'] = $term->depth;
+  $variables['display_header'] = FALSE;
+  $variables['answer_category_name'] = $faq_settings->get('answer_category_name');
+  if ($variables['answer_category_name'] && FaqHelper::taxonomyTermCountNodes($term->id())) {
+    $variables['display_header'] = TRUE;
+  }
+}
diff --git a/js/faq.js b/js/faq.js
new file mode 100644
index 0000000..db2300c
--- /dev/null
+++ b/js/faq.js
@@ -0,0 +1,273 @@
+(function ($, Drupal, drupalSettings) {
+    
+    "use strict";
+    
+    function teaser_handler(event) {
+        if ($("input[name=faq_display]:checked").val() != "new_page") {
+            if ($("input[name=faq_use_teaser]:checked").val() == 1) {
+                $("input[name=faq_more_link]").removeAttr("disabled");
+            }
+            else {
+                $("input[name=faq_more_link]").attr("disabled", "disabled");
+            }
+        }
+    }
+    
+    function faq_display_handler(event) {
+        // Enable / disable "questions_inline" and "questions_top" only settings.
+        if ($("input[name=faq_display]:checked").val() == "questions_inline" || $("input[name=faq_display]:checked").val() == "questions_top") {
+            $("input[name=faq_back_to_top]").removeAttr("disabled");
+            $("input[name=faq_qa_mark]").removeAttr("disabled");
+            // Enable / disable label settings according to "qa_mark" setting.
+            if ($("input[name=faq_qa_mark]:checked").val() == 1) {
+                $("input[name=faq_question_label]").removeAttr("disabled");
+                $("input[name=faq_answer_label]").removeAttr("disabled");
+            }
+            else {
+                $("input[name=faq_question_label]").attr("disabled", "disabled");
+                $("input[name=faq_answer_label]").attr("disabled", "disabled");
+            }
+        }
+        else {
+            $("input[name=faq_back_to_top]").attr("disabled", "disabled");
+            $("input[name=faq_qa_mark]").attr("disabled", "disabled");
+            $("input[name=faq_question_label]").attr("disabled", "disabled");
+            $("input[name=faq_answer_label]").attr("disabled", "disabled");
+        }
+
+        // Enable / disable "hide_answer" only settings.
+        if ($("input[name=faq_display]:checked").val() != "hide_answer") {
+            $("input[name=faq_hide_qa_accordion]").attr("disabled", "disabled");
+        }
+        else {
+            $("input[name=faq_hide_qa_accordion]").removeAttr("disabled");
+        }
+
+        // Enable / disable "new_page" only settings.
+        if ($("input[name=faq_display]:checked").val() != "new_page") {
+            $("input[name=faq_use_teaser]").removeAttr("disabled");
+            $("input[name=faq_more_link]").removeAttr("disabled");
+            $("input[name=faq_disable_node_links]").removeAttr("disabled");
+        }
+        else {
+            $("input[name=faq_use_teaser]").attr("disabled", "disabled");
+            $("input[name=faq_more_link]").attr("disabled", "disabled");
+            $("input[name=faq_disable_node_links]").attr("disabled", "disabled");
+        }
+        teaser_handler(event);
+
+        // Enable / disable "new_page" and "questions_top" only settings.
+        if ($("input[name=faq_display]:checked").val() == "new_page" ||
+            $("input[name=faq_display]:checked").val() == "questions_top") {
+            $("select[name=faq_question_listing]").removeAttr("disabled");
+        }
+        else {
+            $("select[name=faq_question_listing]").attr("disabled", "disabled");
+        }
+    }
+    
+    function qa_mark_handler(event) {
+        if ($("input[name=faq_display]:checked").val() == "questions_inline") {
+            // Enable / disable label settings according to "qa_mark" setting.
+            if ($("input[name=faq_qa_mark]:checked").val() == 1) {
+                $("input[name=faq_question_label]").removeAttr("disabled");
+                $("input[name=faq_answer_label]").removeAttr("disabled");
+            }
+            else {
+                $("input[name=faq_question_label]").attr("disabled", "disabled");
+                $("input[name=faq_answer_label]").attr("disabled", "disabled");
+            }
+        }
+    }
+    
+    function questions_top_handler(event) {
+        $("input[name=faq_display]").val() == "questions_top" ?
+            $("input[name=faq_group_questions_top]").removeAttr("disabled"):
+            $("input[name=faq_group_questions_top]").attr("disabled", "disabled");
+
+        $("input[name=faq_display]").val() == "questions_top" ?
+            $("input[name=faq_answer_category_name]").removeAttr("disabled"):
+            $("input[name=faq_answer_category_name]").attr("disabled", "disabled");
+    }
+    
+    function child_term_handler(event) {
+        if ($("input[name=faq_hide_child_terms]:checked").val() == 1) {
+            $("input[name=faq_show_term_page_children]").attr("disabled", "disabled");
+        }
+        else if ($("input[name=faq_category_display]:checked").val() != "categories_inline") {
+            $("input[name=faq_show_term_page_children]").removeAttr("disabled");
+        }
+    }
+    
+    function categories_handler(event) {
+        if ($("input[name=faq_display]").val() == "questions_top") {
+            $("input[name=faq_category_display]:checked").val() == "categories_inline" ?
+                $("input[name=faq_group_questions_top]").removeAttr("disabled"):
+                $("input[name=faq_group_questions_top]").attr("disabled", "disabled");
+            $("input[name=faq_category_display]:checked").val() == "new_page" ?
+                $("input[name=faq_answer_category_name]").attr("disabled", "disabled"):
+                $("input[name=faq_answer_category_name]").removeAttr("disabled");
+        }
+        else {
+            $("input[name=faq_group_questions_top]").attr("disabled", "disabled");
+        }
+
+        // Enable / disable "hide_qa" only settings.
+        if ($("input[name=faq_category_display]:checked").val() != "hide_qa") {
+            $("input[name=faq_category_hide_qa_accordion]").attr("disabled", "disabled");
+        }
+        else {
+            $("input[name=faq_category_hide_qa_accordion]").removeAttr("disabled");
+        }
+
+        $("input[name=faq_category_display]:checked").val() == "categories_inline" ?
+            $("input[name=faq_hide_child_terms]").attr("disabled", "disabled"):
+            $("input[name=faq_hide_child_terms]").removeAttr("disabled");
+        $("input[name=faq_category_display]:checked").val() == "categories_inline" ?
+            $("input[name=faq_show_term_page_children]").attr("disabled", "disabled"):
+            $("input[name=faq_show_term_page_children]").removeAttr("disabled");
+        $("input[name=faq_category_display]:checked").val() == "new_page" ?
+            $("select[name=faq_category_listing]").removeAttr("disabled"):
+            $("select[name=faq_category_listing]").attr("disabled", "disabled");
+
+        child_term_handler();
+    }
+    
+    Drupal.behaviors.initFaqModule = {
+        attach: function (context, settings) {
+            // Hide/show answer for a question.
+            var faq_hide_qa_accordion = settings.hide_qa_accordion;
+            $('div.faq-dd-hide-answer', context).addClass("collapsible collapsed");
+
+            if (!faq_hide_qa_accordion) {
+                $('div.faq-dd-hide-answer:not(.faq-processed)', context).addClass('faq-processed').hide();
+            }
+            $('div.faq-dt-hide-answer:not(.faq-processed)', context).addClass('faq-processed').click(function() {
+                if (faq_hide_qa_accordion) {
+                    $('div.faq-dt-hide-answer').not($(this)).removeClass('faq-qa-visible');
+                }
+                $(this).toggleClass('faq-qa-visible');
+                $(this).parent().addClass('faq-viewed');
+                $('div.faq-dd-hide-answer').not($(this).next('div.faq-dd-hide-answer')).addClass("collapsed");
+                if (!faq_hide_qa_accordion) {
+                    $(this).next('div.faq-dd-hide-answer').slideToggle('fast', function() {
+                        $(this).parent().toggleClass('expanded');
+                    });
+                }
+                $(this).next('div.faq-dd-hide-answer').toggleClass("collapsed");
+
+                // Change the fragment, too, for permalink/bookmark.
+                // To keep the current page from scrolling, refs
+                // http://stackoverflow.com/questions/1489624/modifying-document-location-hash-without-page-scrolling/1489802#1489802
+                var hash = $(this).find('a').attr('id');
+                var fx, node = $('#' + hash);
+                if (node.length) {
+                    fx = $('<div></div>')
+                    .css({position: 'absolute', visibility: 'hidden', top: $(window).scrollTop() + 'px'})
+                    .attr('id', hash)
+                    .appendTo(document.body);
+                    node.attr('id', '');
+                }
+                document.location.hash = hash;
+                if (node.length) {
+                    fx.remove();
+                    node.attr('id', hash);
+                }
+
+                // Scroll the page if the collapsed FAQ is not visible.
+                // If we have the toolbar so the title may be hidden by the bar.
+                var mainScrollTop = Math.max($('html', context).scrollTop(), $('body', context).scrollTop());
+                // We compute mainScrollTop because the behaviour is different on FF, IE and CR
+                if (mainScrollTop > $(this).offset().top) {
+                    $('html, body', context).animate({
+                        scrollTop: $(this).offset().top
+                    }, 1);
+                }
+
+                return false;
+            });
+
+            // Show any question identified by a fragment
+            if (/^#\w+$/.test(document.location.hash)) {
+                $('div.faq-dt-hide-answer ' + document.location.hash).parents('.faq-dt-hide-answer').triggerHandler('click');
+            }
+
+            // Hide/show q/a for a category.
+            var faq_category_hide_qa_accordion = settings.category_hide_qa_accordion;
+            $('div.faq-qa-hide', context).addClass("collapsible collapsed");
+            if (!faq_category_hide_qa_accordion) {
+                $('div.faq-qa-hide', context).hide();
+            }
+            $('div.faq-qa-header .faq-header:not(.faq-processed)', context).addClass('faq-processed').click(function() {
+                if (faq_category_hide_qa_accordion) {
+                    $('div.faq-qa-header .faq-header').not($(this)).removeClass('faq-category-qa-visible');
+                }
+                $(this).toggleClass('faq-category-qa-visible');
+                $('div.faq-qa-hide').not($(this).parent().next('div.faq-qa-hide')).addClass("collapsed");
+                if (!faq_category_hide_qa_accordion) {
+                    $(this).parent().next('div.faq-qa-hide').slideToggle('fast', function() {
+                        $(this).parent().toggleClass('expanded');
+                    });
+                }
+                $(this).parent().next('div.faq-qa-hide').toggleClass("collapsed");
+
+                // Scroll the page if the collapsed FAQ is not visible.
+                // If we have the toolbar so the title may be hidden by the bar.
+                var mainScrollTop = Math.max($('html', context).scrollTop(), $('body', context).scrollTop());
+                // We compute mainScrollTop because the behaviour is different on FF, IE and CR
+                if (mainScrollTop > $(this).offset().top) {
+                    $('html, body', context).animate({
+                        scrollTop: $(this).offset().top
+                    }, 1);
+                }
+
+                return false;
+            });
+
+
+            // Show expand all link.
+            if (!faq_hide_qa_accordion && !faq_category_hide_qa_accordion) {
+                $('#faq-expand-all', context).show();
+                $('#faq-expand-all a.faq-expand-all-link', context).show();
+
+                // Add collapse link click event.
+                $('#faq-expand-all a.faq-collapse-all-link:not(.faq-processed)', context).addClass('faq-processed').click(function () {
+                    $(this).hide();
+                    $('#faq-expand-all a.faq-expand-all-link').show();
+                    $('div.faq-qa-hide').slideUp('slow', function() {
+                        $(this).removeClass('expanded');
+                    });
+                    $('div.faq-dd-hide-answer').slideUp('slow', function() {
+                        $(this).removeClass('expanded');
+                    });
+                });
+
+                // Add expand link click event.
+                $('#faq-expand-all a.faq-expand-all-link:not(.faq-processed)', context).addClass('faq-processed').click(function () {
+                    $(this).hide();
+                    $('#faq-expand-all a.faq-collapse-all-link').show();
+                    $('div.faq-qa-hide').slideDown('slow', function() {
+                        $(this).addClass('expanded');
+                    });
+                    $('div.faq-dd-hide-answer').slideDown('slow', function() {
+                        $(this).addClass('expanded');
+                    });
+                });
+            }
+            
+            // Handle faq_category_settings_form.
+            faq_display_handler();
+            questions_top_handler();
+            categories_handler();
+            teaser_handler();
+            
+            $("input[name=faq_display]:not(.faq-processed)", context).addClass('faq-processed').bind("click", faq_display_handler);
+            $("input[name=faq_qa_mark]:not(.faq-processed)", context).addClass('faq-processed').bind("click", qa_mark_handler);
+            $("input[name=faq_use_teaser]:not(.faq-processed)", context).addClass('faq-processed').bind("click", teaser_handler);
+            $("input[name=faq_category_display]:not(.faq-processed)", context).addClass('faq-processed').bind("click", categories_handler);
+            $("input[name=faq_hide_child_terms]:not(.faq-processed)", context).addClass('faq-processed').bind("click", child_term_handler);
+    
+        }
+    };
+    
+})(jQuery, Drupal, drupalSettings);
\ No newline at end of file
diff --git a/src/Controller/FaqController.php b/src/Controller/FaqController.php
new file mode 100644
index 0000000..d998107
--- /dev/null
+++ b/src/Controller/FaqController.php
@@ -0,0 +1,567 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Controller\FaqController.
+ */
+
+namespace Drupal\faq\Controller;
+
+use Drupal\Core\Controller\ControllerBase;
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\node\Entity\Node;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\Component\Utility\String;
+use Drupal\Component\Utility\SafeMarkup;
+use Drupal\faq\FaqHelper;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+
+/**
+ * Controller routines for FAQ routes.
+ */
+class FaqController extends ControllerBase {
+  /*   * *****************************************************
+   * FAQ PAGES
+   * **************************************************** */
+
+  /**
+   * Function to display the faq page.
+   * 
+   * @param int $tid
+   *   Default is 0, determines if the questions and answers on the page
+   *   will be shown according to a category or non-categorized.
+   * @param string $faq_display
+   *   Optional parameter to override default question layout setting.
+   * @param string $category_display
+   *   Optional parameter to override default category layout setting.
+   * @return
+   *   The page with FAQ questions and answers.
+   * @throws NotFoundHttpException
+   */
+  public function faqPage($tid = 0, $faq_display = '', $category_display = '') {
+    $faq_settings = \Drupal::config('faq.settings');
+
+    $output = $output_answers = '';
+
+    $build = array();
+    $build['#type'] = 'markup';
+    $build['#attached']['css'] = array(
+      drupal_get_path('module', 'faq') . '/css/faq.css'
+    );
+    
+    $build['#title'] = $faq_settings->get('title');
+    
+    if (!$this->moduleHandler()->moduleExists('taxonomy')) {
+      $tid = 0;
+    }
+
+    $faq_display = $faq_settings->get('display');
+    $use_categories = $faq_settings->get('use_categories');
+    $category_display = $faq_settings->get('category_display');
+    // if taxonomy doesn't installed, do not use categories
+    if (!$this->moduleHandler()->moduleExists('taxonomy')) {
+      $use_categories = FALSE;
+    }
+
+    if (($use_categories && $category_display == 'hide_qa') || $faq_display == 'hide_answer') {
+      $build['#attached']['js'] = array(
+        array(
+          'data' => drupal_get_path('module', 'faq') . '/js/faq.js'
+        ),
+        array(
+          'data' => array(
+            'hide_qa_accordion' => $faq_settings->get('hide_qa_accordion'),
+            'category_hide_qa_accordion' => $faq_settings->get('category_hide_qa_accordion')
+          ),
+          'type' => 'setting'
+        )
+      );
+    }
+
+    // Non-categorized questions and answers.
+    if (!$use_categories || ($category_display == 'none' && empty($tid))) {
+      if (!empty($tid)) {
+        throw new NotFoundHttpException();
+      }
+      $default_sorting = $faq_settings->get('default_sorting');
+
+      $query = db_select('node', 'n');
+      $weight_alias = $query->leftJoin('faq_weights', 'w', '%alias.nid=n.nid');
+      $node_data = $query->leftJoin('node_field_data', 'd', 'd.nid=n.nid');
+      $query
+        ->addTag('node_access')
+        ->fields('n', array('nid'))
+        ->condition('n.type', 'faq')
+        ->condition('d.status', 1)
+        ->condition(db_or()->condition("$weight_alias.tid", 0)->isNull("$weight_alias.tid"));
+
+      $default_weight = 0;
+      if ($default_sorting == 'ASC') {
+        $default_weight = 1000000;
+      }
+      // Works, but involves variable concatenation - safe though, since
+      // $default_weight is an integer.
+      $query->addExpression("COALESCE(w.weight, $default_weight)", 'effective_weight');
+      // Doesn't work in Postgres.
+      //$query->addExpression('COALESCE(w.weight, CAST(:default_weight as SIGNED))', 'effective_weight', array(':default_weight' => $default_weight));
+      $query->orderBy('effective_weight', 'ASC')
+        ->orderBy('d.sticky', 'DESC');
+      if ($default_sorting == 'ASC') {
+        $query->orderBy('d.created', 'ASC');
+      }
+      else {
+        $query->orderBy('d.created', 'DESC');
+      }
+
+      // Only need the nid column.
+      $nids = $query->execute()->fetchCol();
+      $data = Node::loadMultiple($nids);
+
+      $questions_to_render = array();
+      $questions_to_render['#data'] = $data;
+
+      switch ($faq_display) {
+        case 'questions_top':
+          $questions_to_render['#theme'] = 'faq_questions_top';
+          break;
+
+        case 'hide_answer':
+          $questions_to_render['#theme'] = 'faq_hide_answer';
+          break;
+
+        case 'questions_inline':
+          $questions_to_render['#theme'] = 'faq_questions_inline';
+          break;
+
+        case 'new_page':
+          $questions_to_render['#theme'] = 'faq_new_page';
+          break;
+      } // End of switch.
+      $output = drupal_render($questions_to_render);
+    }
+
+    // Categorize questions.
+    else {
+      $hide_child_terms = $faq_settings->get('hide_child_terms');
+
+      // If we're viewing a specific category/term.
+      if (!empty($tid)) {
+        if ($term = Term::load($tid)) {
+          $title = $faq_settings->get('title');
+          
+          $build['#title'] = ($title . ($title ? ' - ' : '') . $this->t($term->getName()));
+          
+          $this->_displayFaqByCategory($faq_display, $category_display, $term, 0, $output, $output_answers);
+          $to_render = array(
+            '#theme' => 'faq_page',
+            '#content' => SafeMarkup::set($output),
+            '#answers' => SafeMarkup::set($output_answers),
+          );
+          $build['#markup'] = drupal_render($to_render);
+          return $build;
+        }
+        else {
+          throw new NotFoundHttpException();
+        }
+      }
+
+      $list_style = $faq_settings->get('category_listing');
+      $vocabularies = Vocabulary::loadMultiple();
+      $vocab_omit = $faq_settings->get('omit_vocabulary');
+      $items = array();
+      $vocab_items = array();
+      foreach ($vocabularies as $vid => $vobj) {
+        if (isset($vocab_omit[$vid]) && $vocab_omit[$vid] != 0) {
+          continue;
+        }
+
+        if ($category_display == "new_page") {
+          $vocab_items = $this->_getIndentedFaqTerms($vid, 0);
+          $items = array_merge($items, $vocab_items);
+        }
+        // Not a new page.
+        else {
+          if ($hide_child_terms && $category_display == 'hide_qa') {
+            $tree = taxonomy_get_tree($vid, 0, 1, TRUE);
+          }
+          else {
+            $tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
+          }
+          foreach ($tree as $term) {
+            switch ($category_display) {
+              case 'hide_qa':
+              case 'categories_inline':
+                if (FaqHelper::taxonomyTermCountNodes($term->id())) {
+                  $this->_displayFaqByCategory($faq_display, $category_display, $term, 1, $output, $output_answers);
+                }
+                break;
+            }
+          }
+        }
+      }
+
+      if ($category_display == "new_page") {
+        $output = $this->_renderCategoriesToList($items, $list_style);
+      }
+    }
+
+    $faq_description = $faq_settings->get('description');
+    
+    $markup = array(
+      '#theme' => 'faq_page',
+      '#content' => SafeMarkup::set($output),
+      '#answers' => SafeMarkup::set($output_answers),
+      '#description' => SafeMarkup::set($faq_description),
+    );
+    $build['#markup'] = drupal_render($markup);
+
+    return $build;
+  }
+
+  /**
+   * Define the elements for the FAQ Settings page - order tab.
+   *
+   * @param $category
+   *   The category id of the FAQ page to reorder.
+   * @return
+   *   The form code, before being converted to HTML format.
+   */
+  public function orderPage($tid = NULL) {
+
+    $faq_settings = \Drupal::config('faq.settings');
+    $build = array();
+
+    $build['#attached']['js'] = array(
+      array(
+        'data' => drupal_get_path('module', 'faq') . '/js/faq.js'
+      ),
+      array(
+        'data' => array(
+          'hide_qa_accordion' => $faq_settings->get('hide_qa_accordion'),
+          'category_hide_qa_accordion' => $faq_settings->get('category_hide_qa_accordion')
+        ),
+        'type' => 'setting'
+      )
+    );
+    $build['#attached']['css'] = array(
+      drupal_get_path('module', 'faq') . '/css/faq.css'
+    );
+
+    $build['faq_order'] = $this->formBuilder()->getForm('Drupal\faq\Form\OrderForm');
+
+    return $build;
+  }
+
+  /**
+   * Renders the form for the FAQ Settings page - General tab.
+   *
+   * @return
+   *   The form code inside the $build array.
+   */
+  public function generalSettings() {
+    $build = array();
+
+    $build['faq_general_settings_form'] = $this->formBuilder()->getForm('Drupal\faq\Form\GeneralForm');
+
+    return $build;
+  }
+
+  /**
+   * Renders the form for the FAQ Settings page - Questions tab.
+   *
+   * @return
+   *   The form code inside the $build array.
+   */
+  public function questionsSettings() {
+    $faq_settings = \Drupal::config('faq.settings');
+
+    $build = array();
+
+    $build['#attached']['js'] = array(
+      array(
+        'data' => drupal_get_path('module', 'faq') . '/js/faq.js'
+      ),
+      array(
+        'data' => array(
+          'hide_qa_accordion' => $faq_settings->get('hide_qa_accordion'),
+          'category_hide_qa_accordion' => $faq_settings->get('category_hide_qa_accordion')
+        ),
+        'type' => 'setting'
+      )
+    );
+
+    $build['faq_questions_settings_form'] = $this->formBuilder()->getForm('Drupal\faq\Form\QuestionsForm');
+
+    return $build;
+  }
+
+  /**
+   * Renders the form for the FAQ Settings page - Categories tab.
+   *
+   * @return
+   *   The form code inside the $build array.
+   */
+  public function categoriesSettings() {
+    $faq_settings = \Drupal::config('faq.settings');
+
+    $build = array();
+
+    $build['#attached']['js'] = array(
+      array(
+        'data' => drupal_get_path('module', 'faq') . '/js/faq.js'
+      ),
+      array(
+        'data' => array(
+          'hide_qa_accordion' => $faq_settings->get('hide_qa_accordion'),
+          'category_hide_qa_accordion' => $faq_settings->get('category_hide_qa_accordion')
+        ),
+        'type' => 'setting'
+      )
+    );
+
+    if (!$this->moduleHandler()->moduleExists('taxonomy')) {
+      drupal_set_message(t('Categorization of questions will not work without the "taxonomy" module being enabled.'), 'error');
+    }
+
+    $build['faq_categories_settings_form'] = $this->formBuilder()->getForm('Drupal\faq\Form\CategoriesForm');
+
+    return $build;
+  }
+
+  /*   * ***************************************************************
+   * PRIVATE HELPER FUCTIONS
+   * *************************************************************** */
+
+  /**
+   * Display FAQ questions and answers filtered by category.
+   *
+   * @param $faq_display
+   *   Define the way the FAQ is being shown; can have the values:
+   *   'questions top',hide answers','questions inline','new page'.
+   * @param $category_display
+   *   The layout of categories which should be used.
+   * @param $term
+   *   The category / term to display FAQs for.
+   * @param $display_header
+   *   Set if the header will be shown or not.
+   * @param &$output
+   *   Reference which holds the content of the page, HTML formatted.
+   * @param &$output_answer
+   *   Reference which holds the answers from the FAQ, when showing questions
+   *   on top.
+   */
+  private function _displayFaqByCategory($faq_display, $category_display, $term, $display_header, &$output, &$output_answers) {
+    $default_sorting = \Drupal::config('faq.settings')->get('default_sorting');
+
+    $term_id = $term->id();
+
+    $query = db_select('node', 'n');
+    $query->join('node_field_data', 'd', 'd.nid = n.nid');
+    $query->innerJoin('taxonomy_index', 'ti', 'n.nid = ti.nid');
+    $query->leftJoin('faq_weights', 'w', 'w.tid = ti.tid AND n.nid = w.nid');
+    $query->fields('n', array('nid'))
+      ->condition('n.type', 'faq')
+      ->condition('d.status', 1)
+      ->condition("ti.tid", $term_id)
+      ->addTag('node_access');
+
+    $default_weight = 0;
+    if ($default_sorting == 'ASC') {
+      $default_weight = 1000000;
+    }
+    // Works, but involves variable concatenation - safe though, since
+    // $default_weight is an integer.
+    $query->addExpression("COALESCE(w.weight, $default_weight)", 'effective_weight');
+    // Doesn't work in Postgres.
+    //$query->addExpression('COALESCE(w.weight, CAST(:default_weight as SIGNED))', 'effective_weight', array(':default_weight' => $default_weight));
+    $query->orderBy('effective_weight', 'ASC')
+      ->orderBy('d.sticky', 'DESC');
+    if ($default_sorting == 'ASC') {
+      $query->orderBy('d.created', 'ASC');
+    }
+    else {
+      $query->orderBy('d.created', 'DESC');
+    }
+
+    // We only want the first column, which is nid, so that we can load all
+    // related nodes.
+    $nids = $query->execute()->fetchCol();
+    $data = Node::loadMultiple($nids);
+
+    // Handle indenting of categories.
+    $depth = 0;
+    if (!isset($term->depth)) {
+      $children = taxonomy_term_load_children($term->id());
+      $term->depth = count($children);
+    }
+    while ($depth < $term->depth) {
+      $display_header = 1;
+      $indent = '<div class="faq-category-indent">';
+      $output .= $indent;
+      $depth++;
+    }
+
+    // Set up the class name for hiding the q/a for a category if required.
+    $faq_class = "faq-qa";
+    if ($category_display == "hide_qa") {
+      $faq_class = "faq-qa-hide";
+    }
+
+    $output_render = $output_answers_render = array(
+      '#data' => $data,
+      '#display_header' => $display_header,
+      '#category_display' => $category_display,
+      '#term' => $term,
+      '#class' => $faq_class,
+      '#parent_term' => $term,
+    );
+
+    switch ($faq_display) {
+      case 'questions_top':
+        $output_render['#theme'] = 'faq_category_questions_top';
+        $output .= drupal_render($output_render);
+        $output_answers_render['#theme'] = 'faq_category_questions_top_answers';
+        $output_answers .= drupal_render($output_answers_render);
+        break;
+
+      case 'hide_answer':
+        $output_render['#theme'] = 'faq_category_hide_answer';
+        $output .= drupal_render($output_render);
+        break;
+
+      case 'questions_inline':
+        $output_render['#theme'] = 'faq_category_questions_inline';
+        $output .= drupal_render($output_render);
+        break;
+
+      case 'new_page':
+        $output_render['#theme'] = 'faq_category_new_page';
+        $output .= drupal_render($output_render);
+        break;
+    }
+    // Handle indenting of categories.
+    while ($depth > 0) {
+      $output .= '</div>';
+      $depth--;
+    }
+  }
+
+  /**
+   * Return a structured array that consists a list of terms indented according to the term depth.
+   *
+   * @param $vid
+   *   Vocabulary id.
+   * @param $tid
+   *   Term id.
+   * @return
+   *   Return an array of a list of terms indented according to the term depth.
+   */
+  private function _getIndentedFaqTerms($vid, $tid) {
+    //if ($this->moduleHandler()->moduleExists('pathauto')) {
+    // pathauto does't exists in D8 yet
+    //}
+    $faq_settings = \Drupal::config('faq.settings');
+
+    $display_faq_count = $faq_settings->get('count');
+    $hide_child_terms = $faq_settings->get('hide_child_terms');
+
+    $items = array();
+    $tree = taxonomy_get_tree($vid, $tid, 1, TRUE);
+
+    foreach ($tree as $term) {
+      $term_id = $term->id();
+      $tree_count = FaqHelper::taxonomyTermCountNodes($term_id);
+
+      if ($tree_count) {
+        // Get term description.
+        $desc = '';
+        $term_description = $term->getDescription();
+        if (!empty($term_description)) {
+          $desc = '<div class="faq-qa-description">';
+          $desc .= $term_description . "</div>";
+        }
+
+
+        $query = db_select('node', 'n');
+        $query->join('node_field_data', 'd', 'n.nid = d.nid');
+        $query->innerJoin('taxonomy_index', 'ti', 'n.nid = ti.nid');
+        $term_node_count = $query->condition('d.status', 1)
+          ->condition('n.type', 'faq')
+          ->condition("ti.tid", $term_id)
+          ->addTag('node_access')
+          ->countQuery()
+          ->execute()
+          ->fetchField();
+
+
+        if ($term_node_count > 0) {
+          $path = "faq-page/$term_id";
+
+          // pathauto is not exists in D8 yet
+          //if (!\Drupal::service('path.alias_manager.cached')->getPathAlias(arg(0) . '/' . $tid) && $this->moduleHandler()->moduleExists('pathauto')) {
+          //}
+
+          if ($display_faq_count) {
+            $count = $term_node_count;
+            if ($hide_child_terms) {
+              $count = $tree_count;
+            }
+            $cur_item = l($this->t($term->getName()), $path) . " ($count) " . $desc;
+          }
+          else {
+            $cur_item = l($this->t($term->getName()), $path) . $desc;
+          }
+        }
+        else {
+          $cur_item = $this->t($term->getName()) . $desc;
+        }
+        if (!empty($term_image)) {
+          $cur_item .= '<div class="clear-block"></div>';
+        }
+
+        $term_items = array();
+        if (!$hide_child_terms) {
+          $term_items = $this->_getIndentedFaqTerms($vid, $term_id);
+        }
+        $items[] = array(
+          "item" => $cur_item,
+          "children" => $term_items,
+        );
+      }
+    }
+
+    return $items;
+  }
+
+  /**
+   * Renders the output of getIntendedFaqTerms to HTML list.
+   * 
+   * @param array $items
+   *   The structured array made by getIntendedTerms function
+   * @param string $list_style
+   *   List style type: ul or ol.
+   * @return string
+   *   HTML formatted output.
+   */
+  private function _renderCategoriesToList($items, $list_style) {
+    
+    $list = array();
+    
+    foreach ($items as $item) {
+      $pre = '';
+      if (!empty($item['children'])) {
+        $pre = $this->_renderCategoriesToList($item['children'], $list_style);
+      }
+      $list[] = SafeMarkup::set($item['item'] . $pre);
+    }
+    
+    $render = array(
+      '#theme' => 'item_list',
+      '#items' => $list,
+      '#list_style' => $list_style,
+    );
+    
+    return drupal_render($render);
+  }
+
+}
diff --git a/src/FaqHelper.php b/src/FaqHelper.php
new file mode 100644
index 0000000..be15158
--- /dev/null
+++ b/src/FaqHelper.php
@@ -0,0 +1,248 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\FaqHelper.
+ */
+
+namespace Drupal\faq;
+
+use Drupal\node\Entity\Node;
+use Drupal\taxonomy\Entity\Vocabulary;
+
+/**
+ * Contains static helper functions for FAQ module.
+ */
+class FaqHelper {
+
+  /**
+   * Function to set up the FAQ breadcrumbs for a given taxonomy term.
+   *
+   * @param $term
+   *   The taxonomy term object.
+   */
+  public static function setFaqBreadcrumb($term = NULL) {
+    $faq_settings = \Drupal::config('faq.settings');
+    $site_settings = \Drupal::config('system.site');
+
+    $breadcrumb = array();
+    if ($faq_settings->get('custom_breadcrumbs')) {
+      if (\Drupal::moduleHandler()->moduleExists('taxonomy') && $term) {
+        $breadcrumb[] = l(t($term->getName()), 'faq-page/' . $term->id());
+        while ($parents = taxonomy_term_load_parents($term->id())) {
+          $term = array_shift($parents);
+          $breadcrumb[] = l(t($term->getName()), 'faq-page/' . $term->id());
+        }
+      }
+      $breadcrumb[] = l($faq_settings->get('title'), 'faq-page');
+      $breadcrumb[] = l(t('Home'), NULL, array('attributes' => array('title' => $site_settings->get('name'))));
+      $breadcrumb = array_reverse($breadcrumb);
+    }
+    return $breadcrumb;
+  }
+
+  /**
+   * Count number of nodes for a term and its children.
+   * 
+   * @param int $tid
+   *   Id of the tadonomy term to count nodes in.
+   * @return int
+   *   Returns the count of the nodes in the given term.
+   */
+  public static function taxonomyTermCountNodes($tid) {
+    static $count;
+
+    if (!isset($count) || !isset($count[$tid])) {
+      $query = db_select('node', 'n')
+        ->fields('n', array('nid'))
+        ->addTag('node_access');
+      $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
+      $query->join('node_field_data', 'd', 'd.nid = n.nid');
+      $query->condition('n.type', 'faq')
+        ->condition('d.status', 1)
+        ->condition('ti.tid', $tid);
+      $count[$tid] = $query->countQuery()->execute()->fetchField();
+    }
+
+    $children_count = 0;
+    foreach (FaqHelper::taxonomyTermChildren($tid) as $child_term) {
+      $children_count += FaqHelper::taxonomyTermCountNodes($child_term);
+    }
+
+    return $count[$tid] + $children_count;
+  }
+
+  /**
+   * Helper function to taxonomyTermCountNodes() to return list of child terms.
+   */
+  public static function taxonomyTermChildren($tid) {
+    static $children;
+
+    if (!isset($children)) {
+      $result = db_select('taxonomy_term_hierarchy', 'tth')
+        ->fields('tth', array('parent', 'tid'))
+        ->execute();
+      while ($term = $result->fetch()) {
+        $children[$term->parent][] = $term->tid;
+      }
+    }
+
+    return isset($children[$tid]) ? $children[$tid] : array();
+  }
+
+  /**
+   * Helper function for retrieving the sub-categories faqs.
+   *
+   * @param $term
+   *   The category / term to display FAQs for.
+   * @param $theme_function
+   *   Theme function to use to format the Q/A layout for sub-categories.
+   * @param $default_weight
+   *   Is 0 for $default_sorting = DESC; is 1000000 for $default_sorting = ASC.
+   * @param $default_sorting
+   *   If 'DESC', nodes are sorted by creation date descending; if 'ASC', nodes
+   *   are sorted by creation date ascending.
+   * @param $category_display
+   *   The layout of categories which should be used.
+   * @param $class
+   *   CSS class which the HTML div will be using. A special class name is
+   *   required in order to hide and questions / answers.
+   * @param $parent_term
+   *   The original, top-level, term we're displaying FAQs for.
+   */
+  public static function getChildCategoriesFaqs($term, $theme_function, $default_weight, $default_sorting, $category_display, $class, $parent_term = NULL) {
+    $output = array();
+
+    $list = taxonomy_term_load_children($term->id());
+
+    if (!is_array($list)) {
+      return '';
+    }
+    foreach ($list as $tid => $child_term) {
+      $child_term->depth = $term->depth + 1;
+
+      if (FaqHelper::taxonomyTermCountNodes($child_term->id())) {
+        $query = db_select('node', 'n');
+        $query->join('node_field_data', 'd', 'n.nid = d.nid');
+        $ti_alias = $query->innerJoin('taxonomy_index', 'ti', '(n.nid = %alias.nid)');
+        $w_alias = $query->leftJoin('faq_weights', 'w', "%alias.tid = {$ti_alias}.tid AND n.nid = %alias.nid");
+        $query
+          ->fields('n', array('nid'))
+          ->condition('n.type', 'faq')
+          ->condition('d.status', 1)
+          ->condition("{$ti_alias}.tid", $child_term->id())
+          ->addTag('node_access');
+
+        $default_weight = 0;
+        if ($default_sorting == 'ASC') {
+          $default_weight = 1000000;
+        }
+        // Works, but involves variable concatenation - safe though, since
+        // $default_weight is an integer.
+        $query->addExpression("COALESCE(w.weight, $default_weight)", 'effective_weight');
+        // Doesn't work in Postgres.
+        //$query->addExpression('COALESCE(w.weight, CAST(:default_weight as SIGNED))', 'effective_weight', array(':default_weight' => $default_weight));
+        $query->orderBy('effective_weight', 'ASC')
+          ->orderBy('d.sticky', 'DESC');
+        if ($default_sorting == 'ASC') {
+          $query->orderBy('d.created', 'ASC');
+        }
+        else {
+          $query->orderBy('d.created', 'DESC');
+        }
+
+        // We only want the first column, which is nid, so that we can load all
+        // related nodes.
+        $nids = $query->execute()->fetchCol();
+        $data = Node::loadMultiple($nids);
+
+        $to_render = array(
+          '#theme' => $theme_function,
+          '#data' => $data,
+          '#display_header' => 1,
+          '#category_display' => $category_display,
+          '#term' => $child_term,
+          '#class' => $class,
+          '#parent_term' => $parent_term,
+        );
+        $output[] = drupal_render($to_render);
+      }
+    }
+
+    return $output;
+  }
+
+  /**
+   * Helper function to setup the list of sub-categories for the header.
+   *
+   * @param $term
+   *   The term to setup the list of child terms for.
+   * @return
+   *   An array of sub-categories.
+   */
+  public static function viewChildCategoryHeaders($term) {
+
+    $child_categories = array();
+    $list = taxonomy_term_load_children($term->id());
+
+    foreach ($list as $tid => $child_term) {
+      $term_node_count = FaqHelper::taxonomyTermCountNodes($child_term->id());
+      if ($term_node_count) {
+
+        // Get taxonomy image.
+        $term_image = '';
+        //taxonomy_image does not exists in D8 yet
+        //if (module_exists('taxonomy_image')) {
+        //  $term_image = taxonomy_image_display($child_term->tid, array('class' => 'faq-tax-image'));
+        //}
+
+        $child_term_id = $child_term->id();
+        $term_vars['link'] = l(t($child_term->getName()), "faq-page/$child_term_id");
+        $term_vars['description'] = t($child_term->getDescription());
+        $term_vars['count'] = $term_node_count;
+        $term_vars['term_image'] = $term_image;
+        $child_categories[] = $term_vars;
+      }
+    }
+
+    return $child_categories;
+  }
+
+  /**
+   * Returns an array containing the vocabularies related to the FAQ node type.
+   * 
+   * @return array Array containing the FAQ related vocabularies.
+   */
+  public static function faqRelatedVocabularies() {
+    $vids = array();
+    foreach (\Drupal::entityManager()->getFieldDefinitions('node', 'faq') as $field_definition) {
+      if ($field_definition->getType() == 'taxonomy_term_reference') {
+        foreach($field_definition->getSetting('allowed_values') as $allowed_values) {
+          $vids[] = $allowed_values['vocabulary'];
+        }
+      }
+    }
+    
+    return Vocabulary::loadMultiple($vids);
+  }
+
+  /**
+   * Replacement for the old arg() function which is removed in drupal 8.0.0-alpha13
+   * TODO: this should be replaced with the a path service when these are not changing any more.
+   * 
+   * @param integer $id
+   *   Number of the path's part.
+   * @return string
+   *   The part of the path which indexed by the given id.
+   */
+  public static function arg($id) {
+    $url_comp = explode('/', request_path());
+    if (isset($url_comp[$id])) {
+      return $url_comp[$id];
+    }
+    else {
+      return null;
+    }
+  }
+
+}
diff --git a/src/FaqViewer.php b/src/FaqViewer.php
new file mode 100644
index 0000000..cd0c5d7
--- /dev/null
+++ b/src/FaqViewer.php
@@ -0,0 +1,136 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\FaqViewController.
+ */
+
+namespace Drupal\faq;
+
+use Drupal\Component\Utility\String;
+use Drupal\Component\Utility\SafeMarkup;
+
+/**
+ * Controlls the display of questions and answers.
+ */
+class FaqViewer {
+
+  /**
+   * Helper function to setup the faq question.
+   *
+   * @param array &$data
+   *   Array reference to store display data in.
+   * @param \Drupal\node\NodeInterface $node
+   *   The node object.
+   * @param string $path
+   *   The path/url which the question should link to if links are disabled.
+   * @param string $anchor
+   *   Link anchor to use in question links.
+   */
+  public static function viewQuestion(&$data, \Drupal\node\NodeInterface $node, $path = NULL, $anchor = NULL) {
+
+    $faq_settings = \Drupal::config('faq.settings');
+    $disable_node_links = $faq_settings->get('disable_node_links');
+    $question = '';
+
+    // Don't link to faq node, instead provide no link, or link to current page.
+    if ($disable_node_links) {
+      if (empty($path) && empty($anchor)) {
+        $question = $node->getTitle();
+      }
+      elseif (empty($path)) {
+        // Can't seem to use l() function with empty string as screen-readers
+        // don't like it, so create anchor name manually.
+        $question = '<a id="' . $anchor . '"></a>' . $node->getTitle();
+      }
+      else {
+        $options = array();
+        if ($anchor) {
+          $options['attributes'] = array('id' => $anchor);
+        }
+        $question = l($node->getTitle(), $path, $options);
+      }
+    }
+
+    // Link to faq node.
+    else {
+      $node_id = $node->id();
+      if (empty($anchor)) {
+        $question = l($node->getTitle(), "node/$node_id)");
+      }
+      else {
+        $question = l($node->getTitle(), "node/$node_id", array("attributes" => array("id" => "$anchor")));
+      }
+    }
+    $question = '<span datatype="" property="dc:title">' . $question . '</span>';
+
+    $detailed_question = $node->get('field_detailed_question')->value;
+    if ($faq_settings->get('display') != 'hide_answer' && !empty($detailed_question) && $faq_settings->get('question_length') == 'both') {
+      $question .= '<div class="faq-detailed-question">' . $detailed_question . '</div>';
+    }
+    $data['question'] = SafeMarkup::set($question);
+  }
+
+  /**
+   * Helper function to setup the faq answer.
+   *
+   * @param array &$data
+   *   Array reference to store display data in.
+   * @param Drupal\node\NodeInterface $node
+   *   The node object.
+   * @param string $back_to_top
+   *   An array containing the "back to top" link.
+   * @param bool $teaser
+   *   Whether or not to use teasers.
+   * @param bool $links
+   *   Whether or not to show node links.
+   */
+  public static function viewAnswer(&$data, \Drupal\node\NodeInterface $node, $teaser) {
+    $faq_settings = \Drupal::config('faq.settings');
+
+    // TODO: hide 'submitted by ... on ...'
+    $view_mode = $teaser ? 'teaser' : 'full';
+
+    $node_build = node_view($node, $view_mode);
+    
+    hide($node_build['title']);
+    if (!$faq_settings->get('question_long_form')) {
+      hide($node_build['field_detailed_question']);
+    }
+    
+    $content = drupal_render($node_build);
+
+    $content .= FaqViewer::initBackToTop();
+
+    $data['body'] = SafeMarkup::set($content);
+  }
+
+  /**
+   * Helper function to setup the "back to top" link.
+   *
+   * @param string $path
+   *   The path/url where the "back to top" link should bring the user too.  This
+   *   could be the 'faq-page' page or one of the categorized faq pages, e.g 'faq-page/123'
+   *   where 123 is the tid.
+   * @return
+   *   An array containing the "back to top" link.
+   */
+  public static function initBackToTop() {
+
+    $faq_settings = \Drupal::config('faq.settings');
+
+    $back_to_top = '';
+    $back_to_top_text = trim($faq_settings->get('back_to_top'));
+    if (!empty($back_to_top_text)) {
+      $options = array(
+        'attributes' => array('title' => t('Go back to the top of the page.')),
+        'html' => TRUE,
+        'fragment' => 'top',
+      );
+      $back_to_top = l(String::checkPlain($back_to_top_text), current_path(), $options);
+    }
+
+    return $back_to_top;
+  }
+
+}
diff --git a/src/Form/CategoriesForm.php b/src/Form/CategoriesForm.php
new file mode 100644
index 0000000..1c74983
--- /dev/null
+++ b/src/Form/CategoriesForm.php
@@ -0,0 +1,167 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Form\CategoriesForm.
+ */
+
+namespace Drupal\faq\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form for the FAQ settings page - categories tab.
+ */
+class CategoriesForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'faq_categories_settings_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $faq_settings = $this->config('faq.settings');
+
+    // Set up a hidden variable.
+    $form['faq_display'] = array(
+      '#type' => 'hidden',
+      '#value' => $faq_settings->get('display')
+    );
+
+    $form['faq_use_categories'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Categorize questions'),
+      '#description' => $this->t('This allows the user to display the questions according to the categories configured on the add/edit FAQ page.  Use of sub-categories is only recommended for large lists of questions.  The Taxonomy module must be enabled.'),
+      '#default_value' => $faq_settings->get('use_categories')
+    );
+
+    $category_options['none'] = t("Don't display");
+    $category_options['categories_inline'] = $this->t('Categories inline');
+    $category_options['hide_qa'] = $this->t('Clicking on category opens/hides questions and answers under category');
+    $category_options['new_page'] = $this->t('Clicking on category opens the questions/answers in a new page');
+
+    $form['faq_category_display'] = array(
+      '#type' => 'radios',
+      '#options' => $category_options,
+      '#title' => $this->t('Categories layout'),
+      '#description' => $this->t('This controls how the categories are displayed on the page and what happens when someone clicks on the category.'),
+      '#default_value' => $faq_settings->get('category_display')
+    );
+
+    $form['faq_category_misc'] = array(
+      '#type' => 'details',
+      '#title' => $this->t('Miscellaneous layout settings'),
+      '#open' => TRUE
+    );
+
+    $form['faq_category_misc']['faq_category_listing'] = array(
+      '#type' => 'select',
+      '#options' => array(
+        'ol' => $this->t('Ordered list'),
+        'ul' => $this->t('Unordered list'),
+      ),
+      '#title' => $this->t('Categories listing style'),
+      '#description' => t("This allows to select how the categories listing is presented.  It only applies to the 'Clicking on category opens the questions/answers in a new page' layout.  An ordered listing would number the categories, whereas an unordered list will have a bullet to the left of each category."),
+      '#default_value' => $faq_settings->get('category_listing')
+    );
+
+    $form['faq_category_misc']['faq_category_hide_qa_accordion'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Use accordion effect for "opens/hides questions and answers under category" layout'),
+      '#description' => $this->t('This enables an "accordion" style effect where when a category is clicked, the questions appears beneath, and is then hidden when another category is opened.'),
+      '#default_value' => $faq_settings->get('category_hide_qa_accordion')
+    );
+
+    $form['faq_category_misc']['faq_count'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Show FAQ count'),
+      '#description' => $this->t('This displays the number of questions in a category after the category name.'),
+      '#default_value' => $faq_settings->get('count')
+    );
+
+    $form['faq_category_misc']['faq_answer_category_name'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Display category name for answers'),
+      '#description' => t("This allows the user to toggle the visibility of the category name above each answer section for the 'Clicking on question takes user to answer further down the page' question/answer display."),
+      '#default_value' => $faq_settings->get('answer_category_name')
+    );
+
+    $form['faq_category_misc']['faq_group_questions_top'] = array(
+      '#type' => 'checkbox',
+      '#title' => t("Group questions and answers for 'Categories inline'"),
+      '#description' => t("This controls how categories are implemented with the 'Clicking on question takes user to answer further down the page' question/answer display."),
+      '#default_value' => $faq_settings->get('group_questions_top')
+    );
+
+    $form['faq_category_misc']['faq_hide_child_terms'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Only show sub-categories when parent category is selected'),
+      '#description' => t("This allows the user more control over how and when sub-categories are displayed.  It does not affect the 'Categories inline' display."),
+      '#default_value' => $faq_settings->get('hide_child_terms')
+    );
+
+    $form['faq_category_misc']['faq_show_term_page_children'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Show sub-categories on FAQ category pages'),
+      '#description' => t("Sub-categories with 'faq' nodes will be displayed on the per category FAQ page.  This will also happen if 'Only show sub-categories when parent category is selected' is set."),
+      '#default_value' => $faq_settings->get('show_term_page_children')
+    );
+
+    $moduleHandler = \Drupal::moduleHandler();
+    if ($moduleHandler->moduleExists('taxonomy')) {
+      $form['faq_category_advanced'] = array(
+        '#type' => 'details',
+        '#title' => $this->t('Advanced category settings'),
+        '#open' => FALSE
+      );
+      $vocab_options = array();
+      $vocabularies = Vocabulary::loadMultiple();
+      foreach ($vocabularies as $vid => $vobj) {
+        $vocab_options[$vid] = $vobj->name;
+      }
+      if (!empty($vocab_options)) {
+        $form['faq_category_advanced']['faq_omit_vocabulary'] = array(
+          '#type' => 'checkboxes',
+          '#title' => $this->t('Omit vocabulary'),
+          '#description' => $this->t('Terms from these vocabularies will be <em>excluded</em> from the FAQ pages.'),
+          '#default_value' => $faq_settings->get('omit_vocabulary'),
+          '#options' => $vocab_options,
+          '#multiple' => TRUE,
+        );
+      }
+    }
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Remove unnecessary values.
+    form_state_values_clean($form_state);
+
+    $this->config('faq.settings')
+      ->set('use_categories', $form_state['values']['faq_use_categories'])
+      ->set('category_display', $form_state['values']['faq_category_display'])
+      ->set('category_listing', $form_state['values']['faq_category_listing'])
+      ->set('category_hide_qa_accordion', $form_state['values']['faq_category_hide_qa_accordion'])
+      ->set('count', $form_state['values']['faq_count'])
+      ->set('answer_category_name', $form_state['values']['faq_answer_category_name'])
+      ->set('group_questions_top', $form_state['values']['faq_group_questions_top'])
+      ->set('hide_child_terms', $form_state['values']['faq_hide_child_terms'])
+      ->set('show_term_page_children', $form_state['values']['faq_show_term_page_children'])
+      ->set('omit_vocabulary', $form_state['values']['faq_omit_vocabulary'])
+      ->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+}
diff --git a/src/Form/GeneralForm.php b/src/Form/GeneralForm.php
new file mode 100644
index 0000000..a468dc7
--- /dev/null
+++ b/src/Form/GeneralForm.php
@@ -0,0 +1,75 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Form\GeneralForm.
+ */
+
+namespace Drupal\faq\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form for the FAQ settings page - general tab.
+ */
+class GeneralForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'faq_general_settings_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $faq_settings = $this->config('faq.settings');
+
+    $form['faq_title'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('Title'),
+      '#default_value' => $faq_settings->get('title')
+    );
+
+    $form['body_filter']['faq_description'] = array(
+      '#type' => 'textarea',
+      '#title' => $this->t('FAQ Description'),
+      '#default_value' => $faq_settings->get('description'),
+      '#description' => $this->t('Your FAQ description.  This will be placed at the top of the page, above the questions and can serve as an introductory text.'),
+      '#rows' => 5
+    );
+
+    $form['faq_custom_breadcrumbs'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Create custom breadcrumbs for the FAQ'),
+      '#description' => $this->t('This option set the breadcrumb path to "%home > %faqtitle > category trail".', array(
+        '%home' => $this->t('Home'),
+        '%faqtitle' => $faq_settings->get('title')
+        )
+      ),
+      '#default_value' => $faq_settings->get('custom_breadcrumbs')
+    );
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Remove unnecessary values.
+    form_state_values_clean($form_state);
+
+    $this->config('faq.settings')
+      ->set('title', $form_state['values']['faq_title'])
+      ->set('description', $form_state['values']['faq_description'])
+      ->set('custom_breadcrumbs', $form_state['values']['faq_custom_breadcrumbs'])
+      ->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+}
diff --git a/src/Form/OrderForm.php b/src/Form/OrderForm.php
new file mode 100644
index 0000000..6736970
--- /dev/null
+++ b/src/Form/OrderForm.php
@@ -0,0 +1,188 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Form\OrderForm.
+ */
+
+namespace Drupal\faq\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\faq\FaqHelper;
+use Drupal\Component\Utility\String;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form for reordering the FAQ-s.
+ */
+class OrderForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'faq_order_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state, $category = NULL) {
+
+    //get category id from route values
+    if (is_numeric(FaqHelper::arg(1))) {
+      $category = FaqHelper::arg(1);
+    }
+
+    $order = $date_order = '';
+    $faq_settings = $this->config('faq.settings');
+
+    $use_categories = $faq_settings->get('use_categories');
+    if (!$use_categories) {
+      $step = "order";
+    }
+    elseif (!isset($form_state['values']) && empty($category)) {
+      $step = "categories";
+    }
+    else {
+      $step = "order";
+    }
+    $form['step'] = array(
+      '#type' => 'value',
+      '#value' => $step,
+    );
+
+    // Categorized q/a.
+    if ($step == "categories") {
+
+      // Get list of categories.
+      $vocabularies = Vocabulary::loadMultiple();
+      $options = array();
+      foreach ($vocabularies as $vid => $vobj) {
+        $tree = taxonomy_get_tree($vid);
+        foreach ($tree as $term) {
+          if (!FaqHelper::taxonomyTermCountNodes($term->tid)) {
+            continue;
+          }
+          $options[$term->tid] = $this->t($term->name);
+          $form['choose_cat']['faq_category'] = array(
+            '#type' => 'select',
+            '#title' => t('Choose a category'),
+            '#description' => t('Choose a category that you wish to order the questions for.'),
+            '#options' => $options,
+            '#multiple' => FALSE,
+          );
+
+          $form['choose_cat']['search'] = array(
+            '#type' => 'submit',
+            '#value' => t('Search'),
+            '#submit' => array('faq_order_settings_choose_cat_form_submit'),
+          );
+        }
+      }
+    }
+    else {
+      $default_sorting = $faq_settings->get('default_sorting');
+      $default_weight = 0;
+      if ($default_sorting != 'DESC') {
+        $default_weight = 1000000;
+      }
+
+      $options = array();
+      if (!empty($form_state['values']['faq_category'])) {
+        $category = $form_state['values']['faq_category'];
+      }
+
+      // Uncategorized ordering.
+      $query = db_select('node', 'n');
+      $query->join('node_field_data', 'd', 'n.nid = d.nid');
+      $query->fields('n', array('nid'))
+        ->fields('d', array('title'))
+        ->addTag('node_access')
+        ->condition('n.type', 'faq')
+        ->condition('d.status', 1);
+
+      // Works, but involves variable concatenation - safe though, since
+      // $default_weight is an integer.
+      $query->addExpression("COALESCE(w.weight, $default_weight)", 'effective_weight');
+      // Doesn't work in Postgres.
+      //$query->addExpression('COALESCE(w.weight, CAST(:default_weight as SIGNED))', 'effective_weight', array(':default_weight' => $default_weight));
+
+      if (empty($category)) {
+        $category = 0;
+        $w_alias = $query->leftJoin('faq_weights', 'w', 'n.nid = %alias.nid AND %alias.tid = :category', array(':category' => $category));
+        $query->orderBy('effective_weight', 'ASC')
+          ->orderBy('d.sticky', 'DESC')
+          ->orderBy('d.created', $default_sorting == 'DESC' ? 'DESC' : 'ASC');
+      }
+      // Categorized ordering.
+      else {
+        $ti_alias = $query->innerJoin('taxonomy_index', 'ti', '(n.nid = %alias.nid)');
+        $w_alias = $query->leftJoin('faq_weights', 'w', 'n.nid = %alias.nid AND %alias.tid = :category', array(':category' => $category));
+        $query->condition('ti.tid', $category);
+        $query->orderBy('effective_weight', 'ASC')
+          ->orderBy('d.sticky', 'DESC')
+          ->orderBy('d.created', $default_sorting == 'DESC' ? 'DESC' : 'ASC');
+      }
+
+      $options = $query->execute()->fetchAll();
+
+      $form['weight']['faq_category'] = array(
+        '#type' => 'value',
+        '#value' => $category,
+      );
+
+      // Show table ordering form.
+      $form['order_no_cats']['#tree'] = TRUE;
+      $form['order_no_cats']['#theme'] = 'faq_draggable_question_order_table';
+
+      foreach ($options as $i => $record) {
+        $form['order_no_cats'][$i]['nid'] = array(
+          '#type' => 'hidden',
+          '#value' => $record->nid,
+        );
+        $form['order_no_cats'][$i]['title'] = array('#markup' => String::checkPlain($record->title));
+        $form['order_no_cats'][$i]['sort'] = array(
+          '#type' => 'weight',
+          '#delta' => count($options),
+          '#default_value' => $i,
+        );
+      }
+
+      $form['actions']['#type'] = 'actions';
+      $form['actions']['submit'] = array(
+        '#type' => 'submit',
+        '#value' => $this->t('Save order'),
+        '#button_type' => 'primary',
+      );
+    }
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    if ($form_state['values']['op'] == t('Save order') && !empty($form_state['values']['order_no_cats'])) {
+
+      foreach ($form_state['values']['order_no_cats'] as $i => $faq) {
+        $nid = $faq['nid'];
+        $index = $faq['sort'];
+        db_merge('faq_weights')
+          ->fields(array(
+            'weight' => $index,
+          ))
+          ->key(array(
+            'tid' => $form_state['values']['faq_category'],
+            'nid' => $nid,
+          ))
+          ->execute();
+      }
+
+      parent::submitForm($form, $form_state);
+    }
+  }
+
+}
diff --git a/src/Form/QuestionsForm.php b/src/Form/QuestionsForm.php
new file mode 100644
index 0000000..4f8eb7d
--- /dev/null
+++ b/src/Form/QuestionsForm.php
@@ -0,0 +1,184 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Form\QuestionsForm.
+ */
+
+namespace Drupal\faq\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form for the FAQ settings page - questions tab.
+ */
+class QuestionsForm extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'faq_questions_settings_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $faq_settings = $this->config('faq.settings');
+
+    $display_options['questions_inline'] = $this->t('Questions inline');
+    $display_options['questions_top'] = $this->t('Clicking on question takes user to answer further down the page');
+    $display_options['hide_answer'] = $this->t('Clicking on question opens/hides answer under question');
+    $display_options['new_page'] = $this->t('Clicking on question opens the answer in a new page');
+
+    $form['faq_display'] = array(
+      '#type' => 'radios',
+      '#options' => $display_options,
+      '#title' => $this->t('Page layout'),
+      '#description' => $this->t('This controls how the questions and answers are displayed on the page and what happens when someone clicks on the question.'),
+      '#default_value' => $faq_settings->get('display')
+    );
+
+    $form['faq_questions_misc'] = array(
+      '#type' => 'details',
+      '#title' => $this->t('Miscellaneous layout settings'),
+      '#open' => TRUE
+    );
+
+    $form['faq_questions_misc']['faq_question_listing'] = array(
+      '#type' => 'select',
+      '#options' => array(
+        'ol' => $this->t('Ordered list'),
+        'ul' => $this->t('Unordered list'),
+      ),
+      '#title' => $this->t('Questions listing style'),
+      '#description' => $this->t("This allows to select how the questions listing is presented.  It only applies to the layouts: 'Clicking on question takes user to answer further down the page' and 'Clicking on question opens the answer in a new page'.  An ordered listing would number the questions, whereas an unordered list will have a bullet to the left of each question."),
+      '#default_value' => $faq_settings->get('question_listing')
+    );
+
+    $form['faq_questions_misc']['faq_qa_mark'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Label questions and answers'),
+      '#description' => $this->t('This option is only valid for the "Questions Inline" and "Clicking on question takes user to answer further down the page" layouts.  It labels all questions on the faq page with the "question label" setting and all answers with the "answer label" setting.  For example these could be set to "Q:" and "A:".'),
+      '#default_value' => $faq_settings->get('qa_mark')
+    );
+
+    $form['faq_questions_misc']['faq_question_label'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('Question Label'),
+      '#description' => $this->t('The label to pre-pend to the question text in the "Questions Inline" layout if labelling is enabled.'),
+      '#default_value' => $faq_settings->get('question_label')
+    );
+
+    $form['faq_questions_misc']['faq_answer_label'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('Answer Label'),
+      '#description' => $this->t('The label to pre-pend to the answer text in the "Questions Inline" layout if labelling is enabled.'),
+      '#default_value' => $faq_settings->get('answer_label')
+    );
+
+    $form['faq_questions_misc']['faq_question_length'] = array(
+      '#type' => 'radios',
+      '#title' => $this->t('Question length'),
+      '#options' => array(
+        'long' => $this->t('Display longer text'),
+        'short' => $this->t('Display short text'),
+        'both' => $this->t('Display both short and long questions'),
+      ),
+      '#description' => t("The length of question text to display on the FAQ page.  The short question will always be displayed in the FAQ blocks."),
+      '#default_value' => $faq_settings->get('question_length')
+    );
+
+    $form['faq_questions_misc']['faq_question_long_form'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Allow long question text to be configured'),
+      '#default_value' => $faq_settings->get('question_long_form')
+    );
+
+    $form['faq_questions_misc']['faq_hide_qa_accordion'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Use accordion effect for "opens/hides answer under question" layout'),
+      '#description' => $this->t('This enables an "accordion" style effect where when a question is clicked, the answer appears beneath, and is then hidden when another question is opened.'),
+      '#default_value' => $faq_settings->get('hide_qa_accordion')
+    );
+
+    $form['faq_questions_misc']['faq_show_expand_all'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Show "expand / collapse all" links for collapsed questions'),
+      '#description' => $this->t('The links will only be displayed if using the "opens/hides answer under question" or "opens/hides questions and answers under category" layouts.'),
+      '#default_value' => $faq_settings->get('show_expand_all')
+    );
+
+    $form['faq_questions_misc']['faq_use_teaser'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Use answer teaser'),
+      '#description' => t("This enables the display of the answer teaser text instead of the full answer when using the 'Questions inline' or 'Clicking on question takes user to answer further down the page' display options.  This is useful when you have long descriptive text.  The user can see the full answer by clicking on the question."),
+      '#default_value' => $faq_settings->get('use_teaser')
+    );
+
+    // This setting has no meaning in D8 since comments are fields and read more link depends on view mode settings
+    //$form['faq_questions_misc']['faq_show_node_links'] = array(
+    //  '#type' => 'checkbox',
+    //  '#title' => $this->t('Show node links'),
+    //  '#description' => $this->t('This enables the display of links under the answer text on the faq page.  Examples of these links include "Read more", "Add comment".'),
+    //  '#default_value' => $faq_settings->get('show_node_links')
+    //);
+
+    $form['faq_questions_misc']['faq_back_to_top'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('"Back to Top" link text'),
+      '#description' => $this->t('This allows the user to change the text displayed for the links which return the user to the top of the page on certain page layouts.  Defaults to "Back to Top".  Leave blank to have no link.'),
+      '#default_value' => $faq_settings->get('back_to_top')
+    );
+
+    $form['faq_questions_misc']['faq_disable_node_links'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Disable question links to nodes'),
+      '#description' => $this->t('This allows the user to prevent the questions being links to the faq node in all layouts except "Clicking on question opens the answer in a new page".'),
+      '#default_value' => $faq_settings->get('disable_node_links'),
+    );
+
+    $form['faq_questions_misc']['faq_default_sorting'] = array(
+      '#type' => 'select',
+      '#title' => $this->t('Default sorting for unordered FAQs'),
+      '#options' => array(
+        'DESC' => $this->t('Date Descending'),
+        'ASC' => $this->t('Date Ascending'),
+      ),
+      '#description' => t("This controls the default ordering behaviour for new FAQ nodes which haven't been assigned a position."),
+      '#default_value' => $faq_settings->get('default_sorting')
+    );
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Remove unnecessary values.
+    form_state_values_clean($form_state);
+
+    $this->config('faq.settings')
+      ->set('display', $form_state['values']['faq_display'])
+      ->set('question_listing', $form_state['values']['faq_question_listing'])
+      ->set('qa_mark', $form_state['values']['faq_qa_mark'])
+      ->set('question_label', $form_state['values']['faq_question_label'])
+      ->set('answer_label', $form_state['values']['faq_answer_label'])
+      ->set('question_length', $form_state['values']['faq_question_length'])
+      ->set('question_long_form', $form_state['values']['faq_question_long_form'])
+      ->set('hide_qa_accordion', $form_state['values']['faq_hide_qa_accordion'])
+      ->set('show_expand_all', $form_state['values']['faq_show_expand_all'])
+      ->set('use_teaser', $form_state['values']['faq_use_teaser'])
+      //->set('show_node_links', $form_state['values']['faq_show_node_links'])
+      ->set('back_to_top', $form_state['values']['faq_back_to_top'])
+      ->set('disable_node_links', $form_state['values']['faq_disable_node_links'])
+      ->set('default_sorting', $form_state['values']['faq_default_sorting'])
+      ->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+}
diff --git a/src/Plugin/Block/FaqCategoriesBlock.php b/src/Plugin/Block/FaqCategoriesBlock.php
new file mode 100644
index 0000000..58035a7
--- /dev/null
+++ b/src/Plugin/Block/FaqCategoriesBlock.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\faq\Plugin\Block\FaqCategoriesBlock.
+ */
+
+namespace Drupal\faq\Plugin\Block;
+
+use Drupal\faq\FaqHelper;
+use Drupal\block\BlockBase;
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\Component\Annotation\Plugin;
+use Drupal\Core\Annotation\Translation;
+
+/**
+ * Provides a simple block.
+ *
+ * @Block(
+ *   id = "faq_categories",
+ *   admin_label = @Translation("FAQ Categories")
+ * )
+ */
+class FaqCategoriesBlock extends BlockBase {
+
+  /**
+   * Implements \Drupal\block\BlockBase::blockBuild().
+   */
+  public function build() {
+    static $vocabularies, $terms;
+    $items = array();
+
+    $faq_settings = \Drupal::config('faq.settings');
+    if(!$faq_settings->get('use_categories')) {
+      return;
+    }
+    $moduleHandler = \Drupal::moduleHandler();
+    
+    if ($moduleHandler->moduleExists('taxonomy')) {
+      if (!isset($terms)) {
+        $terms = array();
+        $vocabularies = Vocabulary::loadMultiple();
+        $vocab_omit = array_flip($faq_settings->get('omit_vocabulary'));
+        $vocabularies = array_diff_key($vocabularies, $vocab_omit);
+        foreach ($vocabularies as $vocab) {
+          foreach (taxonomy_get_tree($vocab->vid) as $term) {
+            if (FaqHelper::taxonomyTermCountNodes($term->tid)) {
+              $terms[$term->name] = $term->tid;
+            }
+          }
+        }
+      }
+      if (count($terms) > 0) {
+        foreach ($terms as $name => $tid) {
+          $items[] = l($name, 'faq-page/' . $tid);
+        }
+      }
+    }
+    return array(
+      '#theme' => 'item_list',
+      '#items' => $items,
+      '#list_type' => $faq_settings->get('category_listing'),
+    );
+  }
+
+}
diff --git a/templates/faq-category-hide-answer.html.twig b/templates/faq-category-hide-answer.html.twig
new file mode 100644
index 0000000..45a4caf
--- /dev/null
+++ b/templates/faq-category-hide-answer.html.twig
@@ -0,0 +1,117 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show/hide categorized answers when
+ * the question is clicked.
+ * 
+ * Available variables:
+ * - display_header: Boolean value controlling whether a header should be displayed.
+ * - header_title: The category title.
+ * - category_depth: The term or category depth.
+ * - description: The current page's description.
+ * - term_image: The HTML for the category image. This is empty if the taxonomy image module
+ *   is not enabled or there is no image associated with the term.
+ * - display_faq_count: Boolean value controlling whether or not the number of faqs in a category
+ *   should be displayed.
+ * - question_count: The number of questions in category.
+ * - nodes: An array of nodes to be displayed.
+ *   Each node stored in the $nodes array has the following information
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - use_teaser: Whether node.body contains the full body or just the teaser text.
+ * - container_class: The class attribute of the element containing the sub-categories, either
+ *   'faq-qa' or 'faq-qa-hide'. This is used by javascript to open/hide
+ *   a category's faqs.
+ * - subcat_list: An array of sub-categories.  Each sub-category stored in the $subcat_list
+ *   array has the following information:
+ *   - link: The link to the sub-category.
+ *   - description: The sub-category description.
+ *   - count: The number of questions in the sub-category.
+ *   - term_image: The sub-category (taxonomy) image.
+ * - subcat_list_style: The style of the sub-category list, either ol or ul (ordered or unordered).
+ * - subcat_body_list: The sub-categories faqs, recursively themed (by this template).
+ * 
+ * @see template_preprocess_faq_category_hide_answer()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{% if category_depth > 0 %}
+    {% set hdr = 'h4' %}
+{% else %}
+    {% set hdr = 'h3' %}
+{% endif %}
+
+<div class="faq-category-group">
+    <!-- category header with title, link, image, description, and count of questions inside -->
+    <div class="faq-qa-header">
+        {% if display_header %}
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ header_title }}
+                {% if display_faq_count %}
+                  ({{ question_count }})
+                {% endif %}
+            </{{ hdr }}>
+        {% else %}
+            {{ term_image }}
+        {% endif %}
+        
+        {% if description is not empty %}
+            <div class="faq-qa-description">{{ description }}</div>
+        {% endif %}
+        {% if term_image is not empty %}
+            <div class="clear-block"></div>
+        {% endif %}
+    </div><!-- Close div: faq-qa-header -->
+    
+    {% if subcat_list is not empty %}
+        <!-- list subcategories, with title, link, description, count -->
+        <div class="item-list">
+            <{{ subcat_list_style }} class="faq-category-list">
+            {% for subcat in subcat_list %}
+                <li>
+                    {{ subcat.link }}
+                    {% if display_faq_count %}
+                        ({{ subcat.count }})
+                    {% endif %}
+                    {% if subcat.description is not empty %}
+                        <div class="faq-qa-description">{{ subcat.description }}</div>
+                    {% endif %}
+                    <div class="clear-block"></div>
+                </li>
+            {% endfor %}
+            </{{ subcat_list_style }}>
+        </div><!-- Close div: item-list -->
+    {% endif %}
+    
+    <div class="{{ container_class }}">
+        <!-- include subcategories -->
+        {% if subcat_body_list|length > 0 %}
+        {% for subcat_html in subcat_body_list %}
+            <div class="faq-category-indent">{{ subcat_html }}</div>
+        {% endfor %}
+        {% endif %}
+        
+        <!-- list questions (in title link) and answers (in body) -->
+        <div class="faq-dl-hide-answer">
+            {% if nodes|length > 0 %}
+            {% for node in nodes %}
+                <div class="faq-question-answer">
+                    <div class="faq-question faq-dt-hide-answer">
+                        {{ node.question }}
+                    </div><!-- Close div: faq-question faq-dt-hide-answer -->
+                    <div class="faq-answer faq-dd-hide-answer">
+                        {{ node.body }}
+                        {% if node.links is defined %}
+                            {{ node.links }}
+                        {% endif %}
+                    </div><!-- Close div: faq-answer faq-dd-hide-answer -->
+                </div><!-- Close div: faq-question-answer -->
+            {% endfor %}
+            {% endif %}
+        </div><!-- Close div: faq-dl-hide-answer -->
+    </div><!-- Close div: faq-qa / faq-qa-hide -->
+</div><!-- Close div: faq-category-group -->
diff --git a/templates/faq-category-new-page.html.twig b/templates/faq-category-new-page.html.twig
new file mode 100644
index 0000000..a49278f
--- /dev/null
+++ b/templates/faq-category-new-page.html.twig
@@ -0,0 +1,108 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show the categorized answer in a
+ * new page.
+ * 
+ * Available variables:
+ * - display_header: Boolean value controlling whether a header should be displayed.
+ * - header_title: The category title.
+ * - category_depth: The term or category depth.
+ * - description: The current page's description.
+ * - term_image: The HTML for the category image. This is empty if the taxonomy image module
+ *   is not enabled or there is no image associated with the term.
+ * - display_faq_count: Boolean value controlling whether or not the number of faqs in a category
+ *   should be displayed.
+ * - question_count: The number of questions in category.
+ * - question_list: An array of questions.
+ * - question_list_style: The style of the question list, either ol or ul (ordered or unordered).
+ * - container_class: The class attribute of the element containing the sub-categories, either
+ *   'faq-qa' or 'faq-qa-hide'. This is used by javascript to open/hide
+ *   a category's faqs.
+ * - subcat_list: An array of sub-categories.  Each sub-category stored in the $subcat_list
+ *   array has the following information:
+ *   - link: The link to the sub-category.
+ *   - description: The sub-category description.
+ *   - count: The number of questions in the sub-category.
+ *   - term_image: The sub-category (taxonomy) image.
+ * - subcat_list_style: The style of the sub-category list, either ol or ul (ordered or unordered).
+ * - subcat_body_list: The sub-categories faqs, recursively themed (by this template).
+ * 
+ * @see template_preprocess_faq_category_new_page()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{% if category_depth > 0 %}
+    {% set hdr = 'h4' %}
+{% else %}
+    {% set hdr = 'h3' %}
+{% endif %}
+
+<div class="faq-category-group">
+    <!-- category header with title, link, image, description, and count of questions inside -->
+    <div class="faq-qa-header">
+        {% if display_header %}
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ header_title }}
+                {% if display_faq_count %}
+                    ({{ question_count }})
+                {% endif %}
+            </{{ hdr }}>
+        {% else %}
+            {{ term_image }}
+        {% endif %}
+        
+        {% if description is not empty %}
+            <div class="faq-qa-description">{{ description }}</div>
+        {% endif %}
+        {% if term_image is not empty %}
+            <div class="clear-block"></div>
+        {% endif %}
+    </div><!-- Close div: faq-qa-header -->
+    
+    <!-- list subcategories, with title, link, description, count -->
+    {% if subcat_list is not empty %}
+        <div class="item-list">
+            <{{ subcat_list_style }} class="faq-category-list">
+            {% for subcat in subcat_list %}
+                <li>
+                    {{ subcat.link }}
+                    {% if display_faq_count %}
+                        ({{ subcat.count }})
+                    {% endif %}
+                    {% if subcat.description is not empty %}
+                        <div class="faq-qa-description">{{ subcat.description }}</div>
+                    {% endif %}
+                    <div class="clear-block"></div>
+                </li>
+            {% endfor %}
+            </{{ subcat_list_style }}>
+        </div><!-- Close div: item-list -->
+    {% endif %}
+    
+    
+    <div class="{{ container_class }}">
+        <!-- include subcategories -->
+        {% if subcat_body_list|length > 0 %}
+        {% for subcat_html in subcat_body_list %}
+            <div class="faq-category-indent">{{ subcat_html }}</div>
+        {% endfor %}
+        {% endif %}
+        
+        <!-- list questions (in title link) and answers (in body) -->
+        {% if question_list is not empty %}
+            <div class="item-list">
+                <{{ question_list_style }} class="faq-category-list">
+                {% for question_link in question_list %}
+                <li>
+                    {{ question_link }}
+                </li>
+                {% endfor %}
+                </{{ question_list_style }}>
+            </div><!-- Close div: item-list -->
+        {% endif %}
+    </div>
+</div><!-- Close div: faq-category-group -->
diff --git a/templates/faq-category-questions-inline.html.twig b/templates/faq-category-questions-inline.html.twig
new file mode 100644
index 0000000..7129ee7
--- /dev/null
+++ b/templates/faq-category-questions-inline.html.twig
@@ -0,0 +1,127 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show categorized questions inline.
+ * 
+ * Available variables:
+ * - display_header: Boolean value controlling whether a header should be displayed.
+ * - header_title: The category title.
+ * - category_depth: The term or category depth.
+ * - description: The current page's description.
+ * - term_image: The HTML for the category image. This is empty if the taxonomy image module
+ *   is not enabled or there is no image associated with the term.
+ * - display_faq_count: Boolean value controlling whether or not the number of faqs in a category
+ *   should be displayed.
+ * - question_count: The number of questions in category.
+ * - nodes: The array of nodes to be displayed. Each node stored in the $nodes array has the following information:
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - question_label: The question label, intended to be pre-pended to the question text.
+ * - answer_label: The answer label, intended to be pre-pended to the answer text.
+ * - use_teaser: Tells whether $node['body'] contains the full body or just the teaser
+ * - container_class: The class attribute of the element containing the sub-categories, either
+ *   'faq-qa' or 'faq-qa-hide'. This is used by javascript to open/hide
+ *   a category's faqs.
+ * - subcat_list: An array of sub-categories.  Each sub-category stored in the $subcat_list
+ *   array has the following information:
+ *   - link: The link to the sub-category.
+ *   - description: The sub-category description.
+ *   - count: The number of questions in the sub-category.
+ *   - term_image: The sub-category (taxonomy) image.
+ * - subcat_list_style: The style of the sub-category list, either ol or ul (ordered or unordered).
+ * - subcat_body_list: The sub-categories faqs, recursively themed (by this template).
+ * 
+ * @see template_preprocess_faq_category_questions_inline()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{% if category_depth > 0 %}
+    {% set hdr = 'h4' %}
+{% else %}
+    {% set hdr = 'h3' %}
+{% endif %}
+
+<a id="top"></a>
+<div class="faq-category-group">
+    <!-- category header with title, link, image, description, and count of questions inside -->
+    <div class="faq-qa-header">
+        {% if display_header %}
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ header_title }}
+                {% if display_faq_count %}
+                    ({{ question_count }})
+                {% endif %}
+            </{{ hdr }}>
+        {% else %}
+            {{ term_image }}
+        {% endif %}
+        
+        {% if description is not empty %}
+            <div class="faq-qa-description">{{ description }}</div>
+        {% endif %}
+        {% if term_image is not empty %}
+            <div class="clear-block"></div>
+        {% endif %}
+    </div><!-- Close div: faq-qa-header -->
+    
+    <!-- list subcategories, with title, link, description, count -->
+    {% if subcat_list is not empty %}
+        <div class="item-list">
+            <{{ subcat_list_style }} class="faq-category-list">
+            {% for subcat in subcat_list %}
+                <li>
+                    {{ subcat.link }}
+                    {% if display_faq_count %}
+                        ({{ subcat.count }})
+                    {% endif %}
+                    {% if subcat.description is not empty %}
+                        <div class="faq-qa-description">{{ subcat.description }}</div>
+                    {% endif %}
+                    <div class="clear-block"></div>
+                </li>
+            {% endfor %}
+            </{{ subcat_list_style }}>
+        </div><!-- Close div: item-list -->
+    {% endif %}
+    
+    <div class="{{ container_class }}">
+        <!-- include subcategories -->
+        {% if subcat_body_list|length > 0 %}
+            {% for subcat_html in subcat_body_list %}
+                <div class="faq-category-indent">{{ subcat_html }}</div>
+            {% endfor %}
+        {% endif %}
+        
+        <!-- list questions (in title link) and answers (in body) -->
+        <div>
+            {% if nodes|length > 0 %}
+            {% for node in nodes %}
+                <div class="faq-question">
+                    {% if question_label is not empty %}
+                        <strong class="faq-question-label">
+                            {{ question_label }}
+                        </strong>
+                    {% endif %}
+                    {{ node.question }}
+                </div><!-- Close div: faq-question -->
+                <div class="faq-answer">
+                    {% if asnwer_label is not empty %}
+                        <strong class="faq-answer-label">
+                            {{ answer_label }}
+                        </strong>
+                    {% endif %}
+                    {{ node.body }}
+                    {% if node.links is defined %}
+                        {{ node.links }}
+                    {% endif %}
+                </div><!-- Close div: faq-answer -->
+            {% endfor %}
+            {% endif %}
+        </div><!-- Close div -->
+        
+    </div><!-- Close div: faq-qa / faq-qa-hide -->
+</div><!-- Close div: faq-category-group -->
diff --git a/templates/faq-category-questions-top-answers.html.twig b/templates/faq-category-questions-top-answers.html.twig
new file mode 100644
index 0000000..ce881f6
--- /dev/null
+++ b/templates/faq-category-questions-top-answers.html.twig
@@ -0,0 +1,109 @@
+{#
+/**
+ * @file
+ * Template file for the answers section of the FAQ page if set to show
+ * categorized questions at the top of the page.
+ * 
+ * Available variables:
+ * - display_answers: Whether or not there should be any output.
+ * - display_header: Boolean value controlling whether a header should be displayed.
+ * - header_title: The category title.
+ * - category_name: The name of the category.
+ * - answer_category_name: Whether the category name should be displayed with the answers.
+ * - group_questions_top: Whether the questions and answers should be grouped together.
+ * - category_depth: The term or category depth.
+ * - description: The current page's description.
+ * - term_image: The HTML for the category image. This is empty if the taxonomy image module
+ *   is not enabled or there is no image associated with the term.
+ * - display_faq_count: Boolean value controlling whether or not the number of faqs in a category should be displayed.
+ * - question_count: The number of questions in category.
+ * - nodes: The array of nodes to be displayed. Each node stored in the $nodes array has the following information:
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - use_teaser: Tells whether node.body contains the full body or just the teaser
+ * - question_label: The question label, intended to be pre-pended to the question text.
+ * - answer_label: The answer label, intended to be pre-pended to the answer text.
+ * - container_class: The class attribute of the element containing the sub-categories, either
+ *   'faq-qa' or 'faq-qa-hide'. This is used by javascript to open/hide a category's faqs.
+ * - subcat_body_list: The sub-categories faqs, recursively themed (by this template).
+ * 
+ * @see template_preprocess_faq_category_questions_top_answers()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{% if category_depth > 0 %}
+    {% set hdr = 'h4' %}
+{% else %}
+    {% set hdr = 'h3' %}
+{% endif %}
+
+{% if display_answers %}
+    {% if answer_category_name %}
+        {% for i in 0..category_depth %}
+            <div class="faq-category-indent">
+        {% endfor %}
+    {% endif %}
+    
+    <div class="faq-category-menu">
+        {% if display_header %}
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ category_name }}
+            </{{ hdr }}>
+            <div class="clear-block"></div>
+            <div class="faq-category-group">
+            <div>
+        {% endif %}
+        
+        {% if not answer_category_name or display_header %}
+            <!-- Include subcategories. -->
+            {% if subcat_body_list|length > 0 %}
+            {% for subcat_html in subcat_body_list %}
+                {{ subcat_html }}
+            {% endfor %}
+            {% endif %}
+            
+            
+            {% if not display_header %}
+                <div class="faq-category-group">
+                <div>
+            {% endif %}
+            
+            <!-- List questions (in title link) and answers (in body). -->
+            {% if nodes|length > 0 %}
+            {% for node in nodes %}
+                <div class="faq-question">
+                    {% if question_label is not empty %}
+                        <strong class="faq-question-label">
+                            {{ question_label }}
+                        </strong>
+                    {% endif %}
+                    {{ node.question }}
+                </div><!-- Close div: faq-question -->
+                <div class="faq-answer">
+                    {% if answer_label is not empty %}
+                        <strong class="faq-answer-label">
+                            {{ answer_label }}
+                        </strong>
+                    {% endif %}
+                    {{ node.body }}
+                    {% if node.links is defined %}
+                        {{ node.links }}
+                    {% endif %}
+                </div><!-- Close div: faq-answer -->
+            {% endfor %}
+            {% endif %}
+        {% endif %}
+    </div> <!-- Close div -->
+    </div> <!-- Close div: faq-category-group -->
+    </div>
+    
+    {% if answer_category_name %}
+    {% for i in 0..category_depth %}
+        </div><!-- Close div: faq-category-indent -->
+    {% endfor %}
+    {% endif %}
+{% endif %}
diff --git a/templates/faq-category-questions-top.html.twig b/templates/faq-category-questions-top.html.twig
new file mode 100644
index 0000000..fccce02
--- /dev/null
+++ b/templates/faq-category-questions-top.html.twig
@@ -0,0 +1,157 @@
+{#
+/**
+ * @file
+ * Template file for the questions section of the FAQ page if set to show
+ * categorized questions at the top of the page.
+ * 
+ * Available variables:
+ * - display_header: Boolean value controlling whether a header should be displayed.
+ * - header_title: The category title.
+ * - category_name: The name of the category.
+ * - answer_category_name: Whether the category name should be displayed with the answers.
+ * - group_questions_top: Whether the questions and answers should be grouped together.
+ * - category_depth: The term or category depth.
+ * - description: The current page's description.
+ * - term_image: The HTML for the category image. This is empty if the taxonomy image module 
+ *   is not enabled or there is no image associated with the term.
+ * - display_faq_count: Boolean value controlling whether or not the number of faqs in a category should be displayed.
+ * - question_count: The number of questions in category.
+ * - nodes: The array of nodes to be displayed. Each node stored in the $nodes array has the following information:
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - use_teaser: Tells whether node.body contains the full body or just the teaser
+ * - container_class: The class attribute of the element containing the sub-categories, either 'faq-qa' or 'faq-qa-hide'. 
+ *   This is used by javascript to open/hide a category's faqs.
+ * - question_list: An array of question links.
+ * - question_list_style: The style of the question list, ul for unordered, ol for ordered.
+ * - subcat_list: An array of sub-categories.  Each sub-category stored in the subcat_list array has the following information:
+ *   - subcat.link: The link to the sub-category.
+ *   - subcat.description: The sub-category description.
+ *   - subcat.count: The number of questions in the sub-category.
+ *   - subcat.term_image: The sub-category (taxonomy) image.
+ * - subcat_list_style: The style of the sub-category list, either ol or ul (ordered or unordered).
+ * - subcat_body_list: The sub-categories faqs, recursively themed (by this template).
+ * 
+ * @see template_preprocess_faq_category_questions_top()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{% if category_depth > 0 %}
+    {% set hdr = 'h4' %}
+{% else %}
+    {% set hdr = 'h3' %}
+{% endif %}
+
+<a id="top"></a>
+<div class="faq-category-menu">
+    <!-- category header with title, link, image, description, and count of questions inside -->
+    <div class="faq-qa-header">
+        {% if display_header %}
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ header_title }}
+                {% if display_faq_count %}
+                    ({{ question_count }})
+                {% endif %}
+            </{{ hdr }}>
+        {% else %}
+            {{ term_image }}
+        {% endif %}
+        {% if description is not empty %}
+            <div class="faq-qa-description">{{ description }}</div>
+        {% endif %}
+        {% if term_image is not empty %}
+            <div class="clear-block"></div>
+        {% endif %}
+    </div><!-- Close div: faq-qa-header -->
+    
+    {% if subcat_list is not empty %}
+        <!-- list subcategories, with title, link, description, count -->
+        <div class="item-list">
+            <{{ subcat_list_style }} class="faq-category-list">
+            {% for subcat in subcat_list %}
+                <li>
+                    {{ subcat.link }}
+                    {% if display_faq_count %}
+                        ({{ subcat.count }})
+                    {% endif %}
+                    {% if subcat.description is not empty %}
+                        <div class="faq-qa-description">{{ subcat.description }}</div>
+                    {% endif %}
+                    <div class="clear-block"></div>
+                </li>
+            {% endfor %}
+            </{{ subcat_list_style }}>
+        </div>
+    {% endif %}
+    
+    <div class="{{ container_class }}">
+        {% if subcat_body_list|length > 0 %}
+        {% for subcat_html in subcat_body_list %}
+            <div class="faq-category-indent">{{ subcat_html }}</div>
+        {% endfor %}
+        {% endif %}
+        
+        {# list question links #}
+        {% if question_list is not empty %}
+            <div class="item-list">
+                <{{ question_list_style }} class="faq-ul-questions-top">
+                    {% for question_link in question_list %}
+                        <li>
+                            {{ question_link }}
+                        </li>
+                    {% endfor %}
+                </{{ question_list_style }}>
+            </div>
+        {% endif %}
+        
+{% if not group_questions_top or category_display != 'hide_qa' %}
+    </div> <!-- Close div: faq-qa / faq-qa-hide -->
+</div> <!-- Close div: faq-category-menu -->
+{% endif %}
+        
+        {% if answer_category_name %}
+            <!-- Display header before answers in some layouts. -->
+            <{{ hdr }} class="faq-header">
+                {{ term_image }}
+                {{ category_name }}
+            </{{ hdr }}>
+            <div class="clear-block"></div>
+        {% endif %}
+        
+        {# List questions (in title link) and answers (in body). #}
+        <div class="faq-category-group">
+            <div>
+                {% if nodes|length > 0 %}
+                {% for node in nodes %}
+                    <div class="faq-question">
+                        {% if question_label is not empty %}
+                            <strong class="faq-question-label">
+                                {{ question_label}}
+                            </strong>
+                        {% endif %}
+                        {{ node.question }}
+                    </div><!-- Close div: faq-question -->
+                    
+                    <div class="faq-answer">
+                        {% if answer_label is not empty %}
+                            <strong class="faq-answer-label">
+                                {{ answer_label }}
+                            </strong>
+                        {% endif %}
+                        {{ node.body }}
+                        {% if node.links is defined %}
+                            {{ node.links }}
+                        {% endif %}
+                    </div><!-- Close div: faq-answer -->
+                {% endfor %}
+                {% endif %}
+            </div><!-- Close div -->
+        </div><!-- Close div: faq-category-group -->
+{% if group_questions_top and category_display == 'hide_qa' %}
+    </div> <!-- Close div: faq-qa / faq-qa-hide -->
+</div> <!-- Close div: faq-category-menu -->
+{% endif %}
diff --git a/templates/faq-draggable-question-order-table.html.twig b/templates/faq-draggable-question-order-table.html.twig
new file mode 100644
index 0000000..db4879a
--- /dev/null
+++ b/templates/faq-draggable-question-order-table.html.twig
@@ -0,0 +1,15 @@
+{#
+/**
+ * @file
+ * Template file for the questions reorder page.
+ * 
+ * Available variables:
+ * - order_table: Renders the question reorder table.
+ * 
+ * @see template_preprocess_faq_draggable_questions_order_table()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{{ order_table }}
\ No newline at end of file
diff --git a/templates/faq-hide-answer.html.twig b/templates/faq-hide-answer.html.twig
new file mode 100644
index 0000000..cd6f829
--- /dev/null
+++ b/templates/faq-hide-answer.html.twig
@@ -0,0 +1,36 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show/hide the answers when the
+ * question is clicked.
+ * 
+ * Available variables:
+ * - nodes: The array of nodes to be displayed. Each node stored in the $nodes array has the following information:
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - use_teaser: Tells whether node.body contains the full body or just the teaser
+ * 
+ * @see template_preprocess_faq_hide_answer()
+ * 
+ * @ingroup themable
+ */
+#}
+
+<div>
+{% if nodes|length > 0 %}
+    {% for node in nodes %}
+        <div class="faq-question-answer">
+            <div class="faq-question faq-dt-hide-answer">
+                {{ node.question }}
+            </div><!-- Close div: faq-question faq-dt-hide-answer -->
+            <div class="faq-answer faq-dd-hide-answer">
+                {{ node.body }}
+                {% if node.links is defined %}
+                    {{ node.links }}
+                {% endif %}
+            </div><!-- Close div: faq-answer faq-dd-hide-answer -->
+        </div><!-- Close div: faq-question-answer -->
+    {% endfor %}
+{% endif %}
+</div><!-- Close div -->
diff --git a/templates/faq-new-page.html.twig b/templates/faq-new-page.html.twig
new file mode 100644
index 0000000..58e344d
--- /dev/null
+++ b/templates/faq-new-page.html.twig
@@ -0,0 +1,17 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show the answer in a new page.
+ * 
+ * Available variables:
+ * - list_style: The style of the list, either ol or ul (ordered list or unordered list).
+ * - list_items: An array of nodes to be displayed in the list.
+ * - list: Pre-formatted list.
+ * 
+ * @see template_preprocess_faq_new_page()
+ * 
+ * @ingroup themable
+ */
+#}
+
+{{ list }}
diff --git a/templates/faq-page.html.twig b/templates/faq-page.html.twig
new file mode 100644
index 0000000..569cd3f
--- /dev/null
+++ b/templates/faq-page.html.twig
@@ -0,0 +1,35 @@
+{#
+/**
+ * @file
+ * Template file for wrapping FAQ pages
+ * 
+ * Available variables:
+ * - description: Rendered description of the FAQ-page.
+ * - content: Rendered content.
+ * - answers: Rendered answers.
+ * - faq_expand: True or false, depends on 
+ * 'Show "expand / collapse all" links for collapsed questions' setting.
+ * 
+ * @see template_preprocess_faq_page()
+ * 
+ * @ingroup themable
+ */
+#}
+
+<div class="faq-content">
+    <div class="faq">
+        {% if description is not empty %}
+            <div class="faq-description">
+                {{ description }}
+            </div>
+        {% endif %}
+        {% if faq_expand %}
+            <div id="faq-expand-all">
+                <a class="faq-expand-all-link" href="#faq-expand-all-link">[{{ 'expand all'|t }}]</a>
+                <a class="faq-collapse-all-link" href="#faq-collapse-all-link">[{{ 'collapse all'|t }}]</a>
+            </div>
+        {% endif %}
+        {{ content }}
+        {{ answers }}
+    </div>
+</div>
diff --git a/templates/faq-questions-inline.html.twig b/templates/faq-questions-inline.html.twig
new file mode 100644
index 0000000..cdbbb3d
--- /dev/null
+++ b/templates/faq-questions-inline.html.twig
@@ -0,0 +1,47 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show the questions inline.
+ * 
+ * Available variables:
+ * - nodes: The array of nodes to be displayed. Each node stored in the $nodes array has the following information:
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - question_label: The question label, intended to be pre-pended to the question text.
+ * - answer_label: The answer label, intended to be pre-pended to the answer text.
+ * - use_teaser: Tells whether $node['body'] contains the full body or just the teaser
+ * 
+ * @see template_preprocess_faq_questions_inline()
+ * 
+ * @ingroup themable
+ */
+#}
+
+<a id="top"></a>
+<div>
+{% if nodes|length > 0 %}
+    {% for node in nodes %}
+        <br />
+        <div class="faq-question">
+            {% if question_label is not empty %}
+                <strong>
+                    {{ question_label }}
+                </strong>
+            {% endif %}
+            {{ node.question }}
+        </div><!-- Close div: faq-question -->
+        <div class="faq-answer">
+            {% if answer_label is not empty %}
+                <strong>
+                    {{ answer_label }}
+                </strong>
+            {% endif %}
+            {{ node.body }}
+            {% if node.links is defined %}
+                {{ node.links }}
+            {% endif %}
+        </div><!-- Close div: faq-answer -->
+    {% endfor %}
+{% endif %}
+</div><!-- Close div -->
diff --git a/templates/faq-questions-top.html.twig b/templates/faq-questions-top.html.twig
new file mode 100644
index 0000000..6a269d8
--- /dev/null
+++ b/templates/faq-questions-top.html.twig
@@ -0,0 +1,48 @@
+{#
+/**
+ * @file
+ * Template file for the FAQ page if set to show the questions 
+ * in a list at the top
+ * 
+ * Available variables:
+ * - questions_list: Pre-formatted list of questions.
+ * - questions: An array of questions to use for producing the question list at the top.
+ * - answers: An array of answers to use for producing the main body of text.
+ *   - question: The question text.
+ *   - body: The answer text.
+ *   - links: Represents the node links, e.g. "Read more".
+ * - use_teaser: Is true if $answer['body'] is a teaser.
+ * - list_style: Represents the style of list, ul for unordered, ol for ordered.
+ * - question_label: The question label, intended to be pre-pended to the question text.
+ * - answer_label: The answer label, intended to be pre-pended to the answer text.
+ * - limit: Represents the number of items.
+ * 
+ * @see template_preprocess_faq_questions_top()
+ * 
+ * @ingroup themable
+ */
+#}
+
+<a id="top"></a>
+
+{{ questions_list }}
+<br />
+{% for item in answers|slice(0, limit) %}
+    <div class="faq-question">
+        {% if question_label is not empty %}
+            <strong class="faq-question-label">
+                {{ question_label }}
+            </strong>
+        {% endif %}
+        {{ item.question }}
+    </div>
+    <div class="faq-answer">
+        {% if answer_label is not empty %}
+            <strong class="faq-answer-label">
+                {{ answer_label }}
+            </strong>
+        {% endif %}
+        {{ item.body }}
+        {{ item.links }}
+    </div>
+{% endfor %}
-- 
1.9.4.msysgit.1

